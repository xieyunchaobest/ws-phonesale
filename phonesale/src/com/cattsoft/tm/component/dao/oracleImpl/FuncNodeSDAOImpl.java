package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.IFuncNodeSDAO;import com.cattsoft.tm.vo.FuncNodeSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法FuncNodeSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class FuncNodeSDAOImpl implements IFuncNodeSDAO{    private static Logger log = Logger.getLogger(FuncNodeSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     FuncNodeSVO funcNode=(FuncNodeSVO) vo;    if (StringUtil.isBlank(funcNode.getFuncNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO FUNC_NODE(DESCRIPTION,FILE_NAME,FUNC_NODE_CODE,FUNC_NODE_ID,FUNC_NODE_NAME,FUNC_NODE_TYPE,HTML,NODE_TREE_ID,SECURITY_LEVEL,SHORT_CUT_IMAGE,STS,STS_DATE,SUB_SYSTEM_NAME,VERSION)");sql.append(" VALUES (:description,:fileName,:funcNodeCode,:funcNodeId,:funcNodeName,:funcNodeType,:html,:nodeTreeId,:securityLevel,:shortCutImage,:sts,:stsDate,:subSystemName,:version)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(funcNode.getDescription())) {      sql.setNullString("description");     } else {    sql.setString("description", funcNode.getDescription());    }       if (StringUtil.isBlank(funcNode.getFileName())) {      sql.setNullString("fileName");     } else {    sql.setString("fileName", funcNode.getFileName());    }       if (StringUtil.isBlank(funcNode.getFuncNodeCode())) {      sql.setNullLong("funcNodeCode");     } else {    sql.setLong("funcNodeCode", funcNode.getFuncNodeCode());    }       if (StringUtil.isBlank(funcNode.getFuncNodeId())) {      sql.setNullLong("funcNodeId");     } else {    sql.setLong("funcNodeId", funcNode.getFuncNodeId());    }       if (StringUtil.isBlank(funcNode.getFuncNodeName())) {      sql.setNullString("funcNodeName");     } else {    sql.setString("funcNodeName", funcNode.getFuncNodeName());    }       if (StringUtil.isBlank(funcNode.getFuncNodeType())) {      sql.setNullString("funcNodeType");     } else {    sql.setString("funcNodeType", funcNode.getFuncNodeType());    }       if (StringUtil.isBlank(funcNode.getHtml())) {      sql.setNullString("html");     } else {    sql.setString("html", funcNode.getHtml());    }       if (StringUtil.isBlank(funcNode.getNodeTreeId())) {      sql.setNullLong("nodeTreeId");     } else {    sql.setLong("nodeTreeId", funcNode.getNodeTreeId());    }       if (StringUtil.isBlank(funcNode.getSecurityLevel())) {      sql.setNullLong("securityLevel");     } else {    sql.setLong("securityLevel", funcNode.getSecurityLevel());    }       if (StringUtil.isBlank(funcNode.getShortCutImage())) {      sql.setNullString("shortCutImage");     } else {    sql.setString("shortCutImage", funcNode.getShortCutImage());    }       if (StringUtil.isBlank(funcNode.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", funcNode.getSts());    }    if (funcNode.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", funcNode.getStsDate());    }       if (StringUtil.isBlank(funcNode.getSubSystemName())) {      sql.setNullString("subSystemName");     } else {    sql.setString("subSystemName", funcNode.getSubSystemName());    }       if (StringUtil.isBlank(funcNode.getVersion())) {      sql.setNullString("version");     } else {    sql.setString("version", funcNode.getVersion());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     FuncNodeSVO funcNode=(FuncNodeSVO) vo;    if (StringUtil.isBlank(funcNode.getFuncNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT DESCRIPTION,FILE_NAME,FUNC_NODE_CODE,FUNC_NODE_ID,FUNC_NODE_NAME,FUNC_NODE_TYPE,HTML,NODE_TREE_ID,SECURITY_LEVEL,SHORT_CUT_IMAGE,STS,STS_DATE,SUB_SYSTEM_NAME,VERSION FROM FUNC_NODE WHERE 1=1  ");sql.append(" and FUNC_NODE_ID=:funcNodeId");sql.setLong("funcNodeId", funcNode.getFuncNodeId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      funcNode =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           funcNode = new FuncNodeSVO();           funcNode.setDescription(rs.getString("DESCRIPTION"));           funcNode.setFileName(rs.getString("FILE_NAME"));           funcNode.setFuncNodeCode(rs.getString("FUNC_NODE_CODE"));           funcNode.setFuncNodeId(rs.getString("FUNC_NODE_ID"));           funcNode.setFuncNodeName(rs.getString("FUNC_NODE_NAME"));           funcNode.setFuncNodeType(rs.getString("FUNC_NODE_TYPE"));           funcNode.setHtml(rs.getString("HTML"));           funcNode.setNodeTreeId(rs.getString("NODE_TREE_ID"));           funcNode.setSecurityLevel(rs.getString("SECURITY_LEVEL"));           funcNode.setShortCutImage(rs.getString("SHORT_CUT_IMAGE"));           funcNode.setSts(rs.getString("STS"));           funcNode.setStsDate(rs.getTimestamp("STS_DATE"));           funcNode.setSubSystemName(rs.getString("SUB_SYSTEM_NAME"));           funcNode.setVersion(rs.getString("VERSION"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return funcNode;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       FuncNodeSVO funcNode=(FuncNodeSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT DESCRIPTION,FILE_NAME,FUNC_NODE_CODE,FUNC_NODE_ID,FUNC_NODE_NAME,FUNC_NODE_TYPE,HTML,NODE_TREE_ID,SECURITY_LEVEL,SHORT_CUT_IMAGE,STS,STS_DATE,SUB_SYSTEM_NAME,VERSION FROM FUNC_NODE WHERE 1=1 ");     try {if (funcNode.getFlagDescription() == 1) {      if (StringUtil.isBlank(funcNode.getDescription())) {             sql.append(" and DESCRIPTION is null ");          }      else{             sql.append(" and DESCRIPTION=:description");             sql.setString("description", funcNode.getDescription());          }   } if (funcNode.getFlagFileName() == 1) {      if (StringUtil.isBlank(funcNode.getFileName())) {             sql.append(" and FILE_NAME is null ");          }      else{             sql.append(" and FILE_NAME=:fileName");             sql.setString("fileName", funcNode.getFileName());          }   } if (funcNode.getFlagFuncNodeCode() == 1) {      if (StringUtil.isBlank(funcNode.getFuncNodeCode())) {             sql.append(" and FUNC_NODE_CODE is null ");          }      else{             sql.append(" and FUNC_NODE_CODE=:funcNodeCode");             sql.setLong("funcNodeCode", funcNode.getFuncNodeCode());          }   } if (funcNode.getFlagFuncNodeId() == 1) {      if (StringUtil.isBlank(funcNode.getFuncNodeId())) {             sql.append(" and FUNC_NODE_ID is null ");          }      else{             sql.append(" and FUNC_NODE_ID=:funcNodeId");             sql.setLong("funcNodeId", funcNode.getFuncNodeId());          }   } if (funcNode.getFlagFuncNodeName() == 1) {      if (StringUtil.isBlank(funcNode.getFuncNodeName())) {             sql.append(" and FUNC_NODE_NAME is null ");          }      else{             sql.append(" and FUNC_NODE_NAME=:funcNodeName");             sql.setString("funcNodeName", funcNode.getFuncNodeName());          }   } if (funcNode.getFlagFuncNodeType() == 1) {      if (StringUtil.isBlank(funcNode.getFuncNodeType())) {             sql.append(" and FUNC_NODE_TYPE is null ");          }      else{             sql.append(" and FUNC_NODE_TYPE=:funcNodeType");             sql.setString("funcNodeType", funcNode.getFuncNodeType());          }   } if (funcNode.getFlagHtml() == 1) {      if (StringUtil.isBlank(funcNode.getHtml())) {             sql.append(" and HTML is null ");          }      else{             sql.append(" and HTML=:html");             sql.setString("html", funcNode.getHtml());          }   } if (funcNode.getFlagNodeTreeId() == 1) {      if (StringUtil.isBlank(funcNode.getNodeTreeId())) {             sql.append(" and NODE_TREE_ID is null ");          }      else{             sql.append(" and NODE_TREE_ID=:nodeTreeId");             sql.setLong("nodeTreeId", funcNode.getNodeTreeId());          }   } if (funcNode.getFlagSecurityLevel() == 1) {      if (StringUtil.isBlank(funcNode.getSecurityLevel())) {             sql.append(" and SECURITY_LEVEL is null ");          }      else{             sql.append(" and SECURITY_LEVEL=:securityLevel");             sql.setLong("securityLevel", funcNode.getSecurityLevel());          }   } if (funcNode.getFlagShortCutImage() == 1) {      if (StringUtil.isBlank(funcNode.getShortCutImage())) {             sql.append(" and SHORT_CUT_IMAGE is null ");          }      else{             sql.append(" and SHORT_CUT_IMAGE=:shortCutImage");             sql.setString("shortCutImage", funcNode.getShortCutImage());          }   } if (funcNode.getFlagSts() == 1) {      if (StringUtil.isBlank(funcNode.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", funcNode.getSts());          }   } if (funcNode.getFlagStsDate() == 1) {      if (funcNode.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", funcNode.getStsDate());          }   } if (funcNode.getFlagSubSystemName() == 1) {      if (StringUtil.isBlank(funcNode.getSubSystemName())) {             sql.append(" and SUB_SYSTEM_NAME is null ");          }      else{             sql.append(" and SUB_SYSTEM_NAME=:subSystemName");             sql.setString("subSystemName", funcNode.getSubSystemName());          }   } if (funcNode.getFlagVersion() == 1) {      if (StringUtil.isBlank(funcNode.getVersion())) {             sql.append(" and VERSION is null ");          }      else{             sql.append(" and VERSION=:version");             sql.setString("version", funcNode.getVersion());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           funcNode = new FuncNodeSVO();           funcNode.setDescription(rs.getString("DESCRIPTION"));           funcNode.setFileName(rs.getString("FILE_NAME"));           funcNode.setFuncNodeCode(rs.getString("FUNC_NODE_CODE"));           funcNode.setFuncNodeId(rs.getString("FUNC_NODE_ID"));           funcNode.setFuncNodeName(rs.getString("FUNC_NODE_NAME"));           funcNode.setFuncNodeType(rs.getString("FUNC_NODE_TYPE"));           funcNode.setHtml(rs.getString("HTML"));           funcNode.setNodeTreeId(rs.getString("NODE_TREE_ID"));           funcNode.setSecurityLevel(rs.getString("SECURITY_LEVEL"));           funcNode.setShortCutImage(rs.getString("SHORT_CUT_IMAGE"));           funcNode.setSts(rs.getString("STS"));           funcNode.setStsDate(rs.getTimestamp("STS_DATE"));           funcNode.setSubSystemName(rs.getString("SUB_SYSTEM_NAME"));           funcNode.setVersion(rs.getString("VERSION"));               res.add(funcNode);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       FuncNodeSVO funcNode=(FuncNodeSVO) vo;    if (StringUtil.isBlank(funcNode.getFuncNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE FUNC_NODE SET ");     try {if (funcNode.getFlagDescription() == 1) {sql.append("DESCRIPTION=:description,"); sql.setString("description", funcNode.getDescription()); } if (funcNode.getFlagFileName() == 1) {sql.append("FILE_NAME=:fileName,"); sql.setString("fileName", funcNode.getFileName()); } if (funcNode.getFlagFuncNodeCode() == 1) {sql.append("FUNC_NODE_CODE=:funcNodeCode,");sql.setLong("funcNodeCode", funcNode.getFuncNodeCode()); } if (funcNode.getFlagFuncNodeName() == 1) {sql.append("FUNC_NODE_NAME=:funcNodeName,"); sql.setString("funcNodeName", funcNode.getFuncNodeName()); } if (funcNode.getFlagFuncNodeType() == 1) {sql.append("FUNC_NODE_TYPE=:funcNodeType,"); sql.setString("funcNodeType", funcNode.getFuncNodeType()); } if (funcNode.getFlagHtml() == 1) {sql.append("HTML=:html,"); sql.setString("html", funcNode.getHtml()); } if (funcNode.getFlagNodeTreeId() == 1) {sql.append("NODE_TREE_ID=:nodeTreeId,");sql.setLong("nodeTreeId", funcNode.getNodeTreeId()); } if (funcNode.getFlagSecurityLevel() == 1) {sql.append("SECURITY_LEVEL=:securityLevel,");sql.setLong("securityLevel", funcNode.getSecurityLevel()); } if (funcNode.getFlagShortCutImage() == 1) {sql.append("SHORT_CUT_IMAGE=:shortCutImage,"); sql.setString("shortCutImage", funcNode.getShortCutImage()); } if (funcNode.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", funcNode.getSts()); } if (funcNode.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", funcNode.getStsDate()); } if (funcNode.getFlagSubSystemName() == 1) {sql.append("SUB_SYSTEM_NAME=:subSystemName,"); sql.setString("subSystemName", funcNode.getSubSystemName()); } if (funcNode.getFlagVersion() == 1) {sql.append("VERSION=:version,"); sql.setString("version", funcNode.getVersion()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and FUNC_NODE_ID=:funcNodeId");sql.setLong("funcNodeId", funcNode.getFuncNodeId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO FUNC_NODE(DESCRIPTION,FILE_NAME,FUNC_NODE_CODE,FUNC_NODE_ID,FUNC_NODE_NAME,FUNC_NODE_TYPE,HTML,NODE_TREE_ID,SECURITY_LEVEL,SHORT_CUT_IMAGE,STS,STS_DATE,SUB_SYSTEM_NAME,VERSION)");sql.append(" VALUES (:description,:fileName,:funcNodeCode,:funcNodeId,:funcNodeName,:funcNodeType,:html,:nodeTreeId,:securityLevel,:shortCutImage,:sts,:stsDate,:subSystemName,:version)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       FuncNodeSVO funcNode=(FuncNodeSVO) list.get(i);         if (funcNode== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(funcNode.getFuncNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(funcNode.getDescription())) {      sql.setNullString("description");     } else {    sql.setString("description", funcNode.getDescription());    }       if (StringUtil.isBlank(funcNode.getFileName())) {      sql.setNullString("fileName");     } else {    sql.setString("fileName", funcNode.getFileName());    }       if (StringUtil.isBlank(funcNode.getFuncNodeCode())) {      sql.setNullLong("funcNodeCode");     } else {    sql.setLong("funcNodeCode", funcNode.getFuncNodeCode());    }       if (StringUtil.isBlank(funcNode.getFuncNodeId())) {      sql.setNullLong("funcNodeId");     } else {    sql.setLong("funcNodeId", funcNode.getFuncNodeId());    }       if (StringUtil.isBlank(funcNode.getFuncNodeName())) {      sql.setNullString("funcNodeName");     } else {    sql.setString("funcNodeName", funcNode.getFuncNodeName());    }       if (StringUtil.isBlank(funcNode.getFuncNodeType())) {      sql.setNullString("funcNodeType");     } else {    sql.setString("funcNodeType", funcNode.getFuncNodeType());    }       if (StringUtil.isBlank(funcNode.getHtml())) {      sql.setNullString("html");     } else {    sql.setString("html", funcNode.getHtml());    }       if (StringUtil.isBlank(funcNode.getNodeTreeId())) {      sql.setNullLong("nodeTreeId");     } else {    sql.setLong("nodeTreeId", funcNode.getNodeTreeId());    }       if (StringUtil.isBlank(funcNode.getSecurityLevel())) {      sql.setNullLong("securityLevel");     } else {    sql.setLong("securityLevel", funcNode.getSecurityLevel());    }       if (StringUtil.isBlank(funcNode.getShortCutImage())) {      sql.setNullString("shortCutImage");     } else {    sql.setString("shortCutImage", funcNode.getShortCutImage());    }       if (StringUtil.isBlank(funcNode.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", funcNode.getSts());    }    if (funcNode.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", funcNode.getStsDate());    }       if (StringUtil.isBlank(funcNode.getSubSystemName())) {      sql.setNullString("subSystemName");     } else {    sql.setString("subSystemName", funcNode.getSubSystemName());    }       if (StringUtil.isBlank(funcNode.getVersion())) {      sql.setNullString("version");     } else {    sql.setString("version", funcNode.getVersion());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     FuncNodeSVO funcNode=(FuncNodeSVO) vo;    if (StringUtil.isBlank(funcNode.getFuncNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM FUNC_NODE WHERE 1=1  ");sql.append(" and FUNC_NODE_ID=:funcNodeId");sql.setLong("funcNodeId", funcNode.getFuncNodeId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     FuncNodeSVO funcNode=(FuncNodeSVO) vo;       }}
