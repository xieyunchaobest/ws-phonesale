package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ITRptKdywrbSDAO;import com.cattsoft.tm.vo.TRptKdywrbSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TRptKdywrbSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TRptKdywrbSDAOImpl implements ITRptKdywrbSDAO{    private static Logger log = Logger.getLogger(TRptKdywrbSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptKdywrbSVO tRptKdywrb=(TRptKdywrbSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_KDYWRB(CREATE_DATE,KDRBC_ADSL,KDRBC_DYLJ,KDRBC_EPON,KDRBC_GPON,KDRBZ_ADSL,KDRBZ_DYLJ,KDRBZ_EPON,KDRBZ_GPON,KDRB_DQ,OPEN_DATE)");sql.append(" VALUES (:createDate,:kdrbcAdsl,:kdrbcDylj,:kdrbcEpon,:kdrbcGpon,:kdrbzAdsl,:kdrbzDylj,:kdrbzEpon,:kdrbzGpon,:kdrbDq,:openDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (tRptKdywrb.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRptKdywrb.getCreateDate());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbcAdsl())) {      sql.setNullLong("kdrbcAdsl");     } else {    sql.setLong("kdrbcAdsl", tRptKdywrb.getKdrbcAdsl());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbcDylj())) {      sql.setNullLong("kdrbcDylj");     } else {    sql.setLong("kdrbcDylj", tRptKdywrb.getKdrbcDylj());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbcEpon())) {      sql.setNullLong("kdrbcEpon");     } else {    sql.setLong("kdrbcEpon", tRptKdywrb.getKdrbcEpon());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbcGpon())) {      sql.setNullLong("kdrbcGpon");     } else {    sql.setLong("kdrbcGpon", tRptKdywrb.getKdrbcGpon());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbzAdsl())) {      sql.setNullLong("kdrbzAdsl");     } else {    sql.setLong("kdrbzAdsl", tRptKdywrb.getKdrbzAdsl());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbzDylj())) {      sql.setNullLong("kdrbzDylj");     } else {    sql.setLong("kdrbzDylj", tRptKdywrb.getKdrbzDylj());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbzEpon())) {      sql.setNullLong("kdrbzEpon");     } else {    sql.setLong("kdrbzEpon", tRptKdywrb.getKdrbzEpon());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbzGpon())) {      sql.setNullLong("kdrbzGpon");     } else {    sql.setLong("kdrbzGpon", tRptKdywrb.getKdrbzGpon());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbDq())) {      sql.setNullString("kdrbDq");     } else {    sql.setString("kdrbDq", tRptKdywrb.getKdrbDq());    }    if (tRptKdywrb.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRptKdywrb.getOpenDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptKdywrbSVO tRptKdywrb=(TRptKdywrbSVO) vo;       Sql sql = new Sql("SELECT CREATE_DATE,KDRBC_ADSL,KDRBC_DYLJ,KDRBC_EPON,KDRBC_GPON,KDRBZ_ADSL,KDRBZ_DYLJ,KDRBZ_EPON,KDRBZ_GPON,KDRB_DQ,OPEN_DATE FROM T_RPT_KDYWRB WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tRptKdywrb =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tRptKdywrb = new TRptKdywrbSVO();           tRptKdywrb.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRptKdywrb.setKdrbcAdsl(rs.getString("KDRBC_ADSL"));           tRptKdywrb.setKdrbcDylj(rs.getString("KDRBC_DYLJ"));           tRptKdywrb.setKdrbcEpon(rs.getString("KDRBC_EPON"));           tRptKdywrb.setKdrbcGpon(rs.getString("KDRBC_GPON"));           tRptKdywrb.setKdrbzAdsl(rs.getString("KDRBZ_ADSL"));           tRptKdywrb.setKdrbzDylj(rs.getString("KDRBZ_DYLJ"));           tRptKdywrb.setKdrbzEpon(rs.getString("KDRBZ_EPON"));           tRptKdywrb.setKdrbzGpon(rs.getString("KDRBZ_GPON"));           tRptKdywrb.setKdrbDq(rs.getString("KDRB_DQ"));           tRptKdywrb.setOpenDate(rs.getTimestamp("OPEN_DATE"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tRptKdywrb;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRptKdywrbSVO tRptKdywrb=(TRptKdywrbSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CREATE_DATE,KDRBC_ADSL,KDRBC_DYLJ,KDRBC_EPON,KDRBC_GPON,KDRBZ_ADSL,KDRBZ_DYLJ,KDRBZ_EPON,KDRBZ_GPON,KDRB_DQ,OPEN_DATE FROM T_RPT_KDYWRB WHERE 1=1 ");     try {if (tRptKdywrb.getFlagCreateDate() == 1) {      if (tRptKdywrb.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", tRptKdywrb.getCreateDate());          }   } if (tRptKdywrb.getFlagKdrbcAdsl() == 1) {      if (StringUtil.isBlank(tRptKdywrb.getKdrbcAdsl())) {             sql.append(" and KDRBC_ADSL is null ");          }      else{             sql.append(" and KDRBC_ADSL=:kdrbcAdsl");             sql.setLong("kdrbcAdsl", tRptKdywrb.getKdrbcAdsl());          }   } if (tRptKdywrb.getFlagKdrbcDylj() == 1) {      if (StringUtil.isBlank(tRptKdywrb.getKdrbcDylj())) {             sql.append(" and KDRBC_DYLJ is null ");          }      else{             sql.append(" and KDRBC_DYLJ=:kdrbcDylj");             sql.setLong("kdrbcDylj", tRptKdywrb.getKdrbcDylj());          }   } if (tRptKdywrb.getFlagKdrbcEpon() == 1) {      if (StringUtil.isBlank(tRptKdywrb.getKdrbcEpon())) {             sql.append(" and KDRBC_EPON is null ");          }      else{             sql.append(" and KDRBC_EPON=:kdrbcEpon");             sql.setLong("kdrbcEpon", tRptKdywrb.getKdrbcEpon());          }   } if (tRptKdywrb.getFlagKdrbcGpon() == 1) {      if (StringUtil.isBlank(tRptKdywrb.getKdrbcGpon())) {             sql.append(" and KDRBC_GPON is null ");          }      else{             sql.append(" and KDRBC_GPON=:kdrbcGpon");             sql.setLong("kdrbcGpon", tRptKdywrb.getKdrbcGpon());          }   } if (tRptKdywrb.getFlagKdrbzAdsl() == 1) {      if (StringUtil.isBlank(tRptKdywrb.getKdrbzAdsl())) {             sql.append(" and KDRBZ_ADSL is null ");          }      else{             sql.append(" and KDRBZ_ADSL=:kdrbzAdsl");             sql.setLong("kdrbzAdsl", tRptKdywrb.getKdrbzAdsl());          }   } if (tRptKdywrb.getFlagKdrbzDylj() == 1) {      if (StringUtil.isBlank(tRptKdywrb.getKdrbzDylj())) {             sql.append(" and KDRBZ_DYLJ is null ");          }      else{             sql.append(" and KDRBZ_DYLJ=:kdrbzDylj");             sql.setLong("kdrbzDylj", tRptKdywrb.getKdrbzDylj());          }   } if (tRptKdywrb.getFlagKdrbzEpon() == 1) {      if (StringUtil.isBlank(tRptKdywrb.getKdrbzEpon())) {             sql.append(" and KDRBZ_EPON is null ");          }      else{             sql.append(" and KDRBZ_EPON=:kdrbzEpon");             sql.setLong("kdrbzEpon", tRptKdywrb.getKdrbzEpon());          }   } if (tRptKdywrb.getFlagKdrbzGpon() == 1) {      if (StringUtil.isBlank(tRptKdywrb.getKdrbzGpon())) {             sql.append(" and KDRBZ_GPON is null ");          }      else{             sql.append(" and KDRBZ_GPON=:kdrbzGpon");             sql.setLong("kdrbzGpon", tRptKdywrb.getKdrbzGpon());          }   } if (tRptKdywrb.getFlagKdrbDq() == 1) {      if (StringUtil.isBlank(tRptKdywrb.getKdrbDq())) {             sql.append(" and KDRB_DQ is null ");          }      else{             sql.append(" and KDRB_DQ=:kdrbDq");             sql.setString("kdrbDq", tRptKdywrb.getKdrbDq());          }   } if (tRptKdywrb.getFlagOpenDate() == 1) {      if (tRptKdywrb.getOpenDate() == null) {             sql.append(" and OPEN_DATE is null ");          }      else{             sql.append(" and OPEN_DATE=:openDate");             sql.setTimestamp("openDate", tRptKdywrb.getOpenDate());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tRptKdywrb = new TRptKdywrbSVO();           tRptKdywrb.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRptKdywrb.setKdrbcAdsl(rs.getString("KDRBC_ADSL"));           tRptKdywrb.setKdrbcDylj(rs.getString("KDRBC_DYLJ"));           tRptKdywrb.setKdrbcEpon(rs.getString("KDRBC_EPON"));           tRptKdywrb.setKdrbcGpon(rs.getString("KDRBC_GPON"));           tRptKdywrb.setKdrbzAdsl(rs.getString("KDRBZ_ADSL"));           tRptKdywrb.setKdrbzDylj(rs.getString("KDRBZ_DYLJ"));           tRptKdywrb.setKdrbzEpon(rs.getString("KDRBZ_EPON"));           tRptKdywrb.setKdrbzGpon(rs.getString("KDRBZ_GPON"));           tRptKdywrb.setKdrbDq(rs.getString("KDRB_DQ"));           tRptKdywrb.setOpenDate(rs.getTimestamp("OPEN_DATE"));               res.add(tRptKdywrb);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRptKdywrbSVO tRptKdywrb=(TRptKdywrbSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE T_RPT_KDYWRB SET ");     try {if (tRptKdywrb.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", tRptKdywrb.getCreateDate()); } if (tRptKdywrb.getFlagKdrbcAdsl() == 1) {sql.append("KDRBC_ADSL=:kdrbcAdsl,");sql.setLong("kdrbcAdsl", tRptKdywrb.getKdrbcAdsl()); } if (tRptKdywrb.getFlagKdrbcDylj() == 1) {sql.append("KDRBC_DYLJ=:kdrbcDylj,");sql.setLong("kdrbcDylj", tRptKdywrb.getKdrbcDylj()); } if (tRptKdywrb.getFlagKdrbcEpon() == 1) {sql.append("KDRBC_EPON=:kdrbcEpon,");sql.setLong("kdrbcEpon", tRptKdywrb.getKdrbcEpon()); } if (tRptKdywrb.getFlagKdrbcGpon() == 1) {sql.append("KDRBC_GPON=:kdrbcGpon,");sql.setLong("kdrbcGpon", tRptKdywrb.getKdrbcGpon()); } if (tRptKdywrb.getFlagKdrbzAdsl() == 1) {sql.append("KDRBZ_ADSL=:kdrbzAdsl,");sql.setLong("kdrbzAdsl", tRptKdywrb.getKdrbzAdsl()); } if (tRptKdywrb.getFlagKdrbzDylj() == 1) {sql.append("KDRBZ_DYLJ=:kdrbzDylj,");sql.setLong("kdrbzDylj", tRptKdywrb.getKdrbzDylj()); } if (tRptKdywrb.getFlagKdrbzEpon() == 1) {sql.append("KDRBZ_EPON=:kdrbzEpon,");sql.setLong("kdrbzEpon", tRptKdywrb.getKdrbzEpon()); } if (tRptKdywrb.getFlagKdrbzGpon() == 1) {sql.append("KDRBZ_GPON=:kdrbzGpon,");sql.setLong("kdrbzGpon", tRptKdywrb.getKdrbzGpon()); } if (tRptKdywrb.getFlagKdrbDq() == 1) {sql.append("KDRB_DQ=:kdrbDq,"); sql.setString("kdrbDq", tRptKdywrb.getKdrbDq()); } if (tRptKdywrb.getFlagOpenDate() == 1) {sql.append("OPEN_DATE=:openDate,"); sql.setTimestamp("openDate", tRptKdywrb.getOpenDate()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_KDYWRB(CREATE_DATE,KDRBC_ADSL,KDRBC_DYLJ,KDRBC_EPON,KDRBC_GPON,KDRBZ_ADSL,KDRBZ_DYLJ,KDRBZ_EPON,KDRBZ_GPON,KDRB_DQ,OPEN_DATE)");sql.append(" VALUES (:createDate,:kdrbcAdsl,:kdrbcDylj,:kdrbcEpon,:kdrbcGpon,:kdrbzAdsl,:kdrbzDylj,:kdrbzEpon,:kdrbzGpon,:kdrbDq,:openDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TRptKdywrbSVO tRptKdywrb=(TRptKdywrbSVO) list.get(i);         if (tRptKdywrb== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }   if (tRptKdywrb.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRptKdywrb.getCreateDate());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbcAdsl())) {      sql.setNullLong("kdrbcAdsl");     } else {    sql.setLong("kdrbcAdsl", tRptKdywrb.getKdrbcAdsl());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbcDylj())) {      sql.setNullLong("kdrbcDylj");     } else {    sql.setLong("kdrbcDylj", tRptKdywrb.getKdrbcDylj());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbcEpon())) {      sql.setNullLong("kdrbcEpon");     } else {    sql.setLong("kdrbcEpon", tRptKdywrb.getKdrbcEpon());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbcGpon())) {      sql.setNullLong("kdrbcGpon");     } else {    sql.setLong("kdrbcGpon", tRptKdywrb.getKdrbcGpon());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbzAdsl())) {      sql.setNullLong("kdrbzAdsl");     } else {    sql.setLong("kdrbzAdsl", tRptKdywrb.getKdrbzAdsl());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbzDylj())) {      sql.setNullLong("kdrbzDylj");     } else {    sql.setLong("kdrbzDylj", tRptKdywrb.getKdrbzDylj());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbzEpon())) {      sql.setNullLong("kdrbzEpon");     } else {    sql.setLong("kdrbzEpon", tRptKdywrb.getKdrbzEpon());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbzGpon())) {      sql.setNullLong("kdrbzGpon");     } else {    sql.setLong("kdrbzGpon", tRptKdywrb.getKdrbzGpon());    }       if (StringUtil.isBlank(tRptKdywrb.getKdrbDq())) {      sql.setNullString("kdrbDq");     } else {    sql.setString("kdrbDq", tRptKdywrb.getKdrbDq());    }    if (tRptKdywrb.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRptKdywrb.getOpenDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptKdywrbSVO tRptKdywrb=(TRptKdywrbSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM T_RPT_KDYWRB WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TRptKdywrbSVO tRptKdywrb=(TRptKdywrbSVO) vo;       }}
