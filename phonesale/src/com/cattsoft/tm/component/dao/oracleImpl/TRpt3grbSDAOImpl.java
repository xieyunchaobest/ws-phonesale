package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ITRpt3grbSDAO;import com.cattsoft.tm.vo.TRpt3grbSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TRpt3grbSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TRpt3grbSDAOImpl implements ITRpt3grbSDAO{    private static Logger log = Logger.getLogger(TRpt3grbSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRpt3grbSVO tRpt3grb=(TRpt3grbSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_3GRB(CREATE_DATE,OPEN_DATE,T3GRB_BYFZ,T3GRB_BZ,T3GRB_DQ,T3GRB_HBT,T3GRB_SYTQ,T3GRB_ZZS)");sql.append(" VALUES (:createDate,:openDate,:t3grbByfz,:t3grbBz,:t3grbDq,:t3grbHbt,:t3grbSytq,:t3grbZzs)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (tRpt3grb.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRpt3grb.getCreateDate());    }    if (tRpt3grb.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRpt3grb.getOpenDate());    }       if (StringUtil.isBlank(tRpt3grb.getT3grbByfz())) {      sql.setNullLong("t3grbByfz");     } else {    sql.setLong("t3grbByfz", tRpt3grb.getT3grbByfz());    }       if (StringUtil.isBlank(tRpt3grb.getT3grbBz())) {      sql.setNullString("t3grbBz");     } else {    sql.setString("t3grbBz", tRpt3grb.getT3grbBz());    }       if (StringUtil.isBlank(tRpt3grb.getT3grbDq())) {      sql.setNullString("t3grbDq");     } else {    sql.setString("t3grbDq", tRpt3grb.getT3grbDq());    }       if (StringUtil.isBlank(tRpt3grb.getT3grbHbt())) {      sql.setNullString("t3grbHbt");     } else {    sql.setString("t3grbHbt", tRpt3grb.getT3grbHbt());    }       if (StringUtil.isBlank(tRpt3grb.getT3grbSytq())) {      sql.setNullLong("t3grbSytq");     } else {    sql.setLong("t3grbSytq", tRpt3grb.getT3grbSytq());    }       if (StringUtil.isBlank(tRpt3grb.getT3grbZzs())) {      sql.setNullLong("t3grbZzs");     } else {    sql.setLong("t3grbZzs", tRpt3grb.getT3grbZzs());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRpt3grbSVO tRpt3grb=(TRpt3grbSVO) vo;       Sql sql = new Sql("SELECT CREATE_DATE,OPEN_DATE,T3GRB_BYFZ,T3GRB_BZ,T3GRB_DQ,T3GRB_HBT,T3GRB_SYTQ,T3GRB_ZZS FROM T_RPT_3GRB WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tRpt3grb =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tRpt3grb = new TRpt3grbSVO();           tRpt3grb.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRpt3grb.setOpenDate(rs.getTimestamp("OPEN_DATE"));           tRpt3grb.setT3grbByfz(rs.getString("T3GRB_BYFZ"));           tRpt3grb.setT3grbBz(rs.getString("T3GRB_BZ"));           tRpt3grb.setT3grbDq(rs.getString("T3GRB_DQ"));           tRpt3grb.setT3grbHbt(rs.getString("T3GRB_HBT"));           tRpt3grb.setT3grbSytq(rs.getString("T3GRB_SYTQ"));           tRpt3grb.setT3grbZzs(rs.getString("T3GRB_ZZS"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tRpt3grb;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRpt3grbSVO tRpt3grb=(TRpt3grbSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CREATE_DATE,OPEN_DATE,T3GRB_BYFZ,T3GRB_BZ,T3GRB_DQ,T3GRB_HBT,T3GRB_SYTQ,T3GRB_ZZS FROM T_RPT_3GRB WHERE 1=1 ");     try {if (tRpt3grb.getFlagCreateDate() == 1) {      if (tRpt3grb.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", tRpt3grb.getCreateDate());          }   } if (tRpt3grb.getFlagOpenDate() == 1) {      if (tRpt3grb.getOpenDate() == null) {             sql.append(" and OPEN_DATE is null ");          }      else{             sql.append(" and OPEN_DATE=:openDate");             sql.setTimestamp("openDate", tRpt3grb.getOpenDate());          }   } if (tRpt3grb.getFlagT3grbByfz() == 1) {      if (StringUtil.isBlank(tRpt3grb.getT3grbByfz())) {             sql.append(" and T3GRB_BYFZ is null ");          }      else{             sql.append(" and T3GRB_BYFZ=:t3grbByfz");             sql.setLong("t3grbByfz", tRpt3grb.getT3grbByfz());          }   } if (tRpt3grb.getFlagT3grbBz() == 1) {      if (StringUtil.isBlank(tRpt3grb.getT3grbBz())) {             sql.append(" and T3GRB_BZ is null ");          }      else{             sql.append(" and T3GRB_BZ=:t3grbBz");             sql.setString("t3grbBz", tRpt3grb.getT3grbBz());          }   } if (tRpt3grb.getFlagT3grbDq() == 1) {      if (StringUtil.isBlank(tRpt3grb.getT3grbDq())) {             sql.append(" and T3GRB_DQ is null ");          }      else{             sql.append(" and T3GRB_DQ=:t3grbDq");             sql.setString("t3grbDq", tRpt3grb.getT3grbDq());          }   } if (tRpt3grb.getFlagT3grbHbt() == 1) {      if (StringUtil.isBlank(tRpt3grb.getT3grbHbt())) {             sql.append(" and T3GRB_HBT is null ");          }      else{             sql.append(" and T3GRB_HBT=:t3grbHbt");             sql.setString("t3grbHbt", tRpt3grb.getT3grbHbt());          }   } if (tRpt3grb.getFlagT3grbSytq() == 1) {      if (StringUtil.isBlank(tRpt3grb.getT3grbSytq())) {             sql.append(" and T3GRB_SYTQ is null ");          }      else{             sql.append(" and T3GRB_SYTQ=:t3grbSytq");             sql.setLong("t3grbSytq", tRpt3grb.getT3grbSytq());          }   } if (tRpt3grb.getFlagT3grbZzs() == 1) {      if (StringUtil.isBlank(tRpt3grb.getT3grbZzs())) {             sql.append(" and T3GRB_ZZS is null ");          }      else{             sql.append(" and T3GRB_ZZS=:t3grbZzs");             sql.setLong("t3grbZzs", tRpt3grb.getT3grbZzs());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tRpt3grb = new TRpt3grbSVO();           tRpt3grb.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRpt3grb.setOpenDate(rs.getTimestamp("OPEN_DATE"));           tRpt3grb.setT3grbByfz(rs.getString("T3GRB_BYFZ"));           tRpt3grb.setT3grbBz(rs.getString("T3GRB_BZ"));           tRpt3grb.setT3grbDq(rs.getString("T3GRB_DQ"));           tRpt3grb.setT3grbHbt(rs.getString("T3GRB_HBT"));           tRpt3grb.setT3grbSytq(rs.getString("T3GRB_SYTQ"));           tRpt3grb.setT3grbZzs(rs.getString("T3GRB_ZZS"));               res.add(tRpt3grb);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRpt3grbSVO tRpt3grb=(TRpt3grbSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE T_RPT_3GRB SET ");     try {if (tRpt3grb.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", tRpt3grb.getCreateDate()); } if (tRpt3grb.getFlagOpenDate() == 1) {sql.append("OPEN_DATE=:openDate,"); sql.setTimestamp("openDate", tRpt3grb.getOpenDate()); } if (tRpt3grb.getFlagT3grbByfz() == 1) {sql.append("T3GRB_BYFZ=:t3grbByfz,");sql.setLong("t3grbByfz", tRpt3grb.getT3grbByfz()); } if (tRpt3grb.getFlagT3grbBz() == 1) {sql.append("T3GRB_BZ=:t3grbBz,"); sql.setString("t3grbBz", tRpt3grb.getT3grbBz()); } if (tRpt3grb.getFlagT3grbDq() == 1) {sql.append("T3GRB_DQ=:t3grbDq,"); sql.setString("t3grbDq", tRpt3grb.getT3grbDq()); } if (tRpt3grb.getFlagT3grbHbt() == 1) {sql.append("T3GRB_HBT=:t3grbHbt,"); sql.setString("t3grbHbt", tRpt3grb.getT3grbHbt()); } if (tRpt3grb.getFlagT3grbSytq() == 1) {sql.append("T3GRB_SYTQ=:t3grbSytq,");sql.setLong("t3grbSytq", tRpt3grb.getT3grbSytq()); } if (tRpt3grb.getFlagT3grbZzs() == 1) {sql.append("T3GRB_ZZS=:t3grbZzs,");sql.setLong("t3grbZzs", tRpt3grb.getT3grbZzs()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_3GRB(CREATE_DATE,OPEN_DATE,T3GRB_BYFZ,T3GRB_BZ,T3GRB_DQ,T3GRB_HBT,T3GRB_SYTQ,T3GRB_ZZS)");sql.append(" VALUES (:createDate,:openDate,:t3grbByfz,:t3grbBz,:t3grbDq,:t3grbHbt,:t3grbSytq,:t3grbZzs)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TRpt3grbSVO tRpt3grb=(TRpt3grbSVO) list.get(i);         if (tRpt3grb== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }   if (tRpt3grb.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRpt3grb.getCreateDate());    }    if (tRpt3grb.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRpt3grb.getOpenDate());    }       if (StringUtil.isBlank(tRpt3grb.getT3grbByfz())) {      sql.setNullLong("t3grbByfz");     } else {    sql.setLong("t3grbByfz", tRpt3grb.getT3grbByfz());    }       if (StringUtil.isBlank(tRpt3grb.getT3grbBz())) {      sql.setNullString("t3grbBz");     } else {    sql.setString("t3grbBz", tRpt3grb.getT3grbBz());    }       if (StringUtil.isBlank(tRpt3grb.getT3grbDq())) {      sql.setNullString("t3grbDq");     } else {    sql.setString("t3grbDq", tRpt3grb.getT3grbDq());    }       if (StringUtil.isBlank(tRpt3grb.getT3grbHbt())) {      sql.setNullString("t3grbHbt");     } else {    sql.setString("t3grbHbt", tRpt3grb.getT3grbHbt());    }       if (StringUtil.isBlank(tRpt3grb.getT3grbSytq())) {      sql.setNullLong("t3grbSytq");     } else {    sql.setLong("t3grbSytq", tRpt3grb.getT3grbSytq());    }       if (StringUtil.isBlank(tRpt3grb.getT3grbZzs())) {      sql.setNullLong("t3grbZzs");     } else {    sql.setLong("t3grbZzs", tRpt3grb.getT3grbZzs());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRpt3grbSVO tRpt3grb=(TRpt3grbSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM T_RPT_3GRB WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TRpt3grbSVO tRpt3grb=(TRpt3grbSVO) vo;       }}
