package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ITRpt2gfzrbSDAO;import com.cattsoft.tm.vo.TRpt2gfzrbSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TRpt2gfzrbSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TRpt2gfzrbSDAOImpl implements ITRpt2gfzrbSDAO{    private static Logger log = Logger.getLogger(TRpt2gfzrbSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRpt2gfzrbSVO tRpt2gfzrb=(TRpt2gfzrbSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_2GFZRB(CREATE_DATE,GFZRB_DYLJ,GFZRB_OCS_DYLJ,GFZRB_OCS_RFZ,GFZRB_OCS_SYTQLJ,GFZRB_OCS_ZZS,GFZRB_QY,GFZRB_RFZ,GFZRB_SYTQLJ,GFZRB_ZZS,OPEN_DATE)");sql.append(" VALUES (:createDate,:gfzrbDylj,:gfzrbOcsDylj,:gfzrbOcsRfz,:gfzrbOcsSytqlj,:gfzrbOcsZzs,:gfzrbQy,:gfzrbRfz,:gfzrbSytqlj,:gfzrbZzs,:openDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (tRpt2gfzrb.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRpt2gfzrb.getCreateDate());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbDylj())) {      sql.setNullLong("gfzrbDylj");     } else {    sql.setLong("gfzrbDylj", tRpt2gfzrb.getGfzrbDylj());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbOcsDylj())) {      sql.setNullLong("gfzrbOcsDylj");     } else {    sql.setLong("gfzrbOcsDylj", tRpt2gfzrb.getGfzrbOcsDylj());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbOcsRfz())) {      sql.setNullLong("gfzrbOcsRfz");     } else {    sql.setLong("gfzrbOcsRfz", tRpt2gfzrb.getGfzrbOcsRfz());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbOcsSytqlj())) {      sql.setNullLong("gfzrbOcsSytqlj");     } else {    sql.setLong("gfzrbOcsSytqlj", tRpt2gfzrb.getGfzrbOcsSytqlj());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbOcsZzs())) {      sql.setNullLong("gfzrbOcsZzs");     } else {    sql.setLong("gfzrbOcsZzs", tRpt2gfzrb.getGfzrbOcsZzs());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbQy())) {      sql.setNullString("gfzrbQy");     } else {    sql.setString("gfzrbQy", tRpt2gfzrb.getGfzrbQy());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbRfz())) {      sql.setNullLong("gfzrbRfz");     } else {    sql.setLong("gfzrbRfz", tRpt2gfzrb.getGfzrbRfz());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbSytqlj())) {      sql.setNullLong("gfzrbSytqlj");     } else {    sql.setLong("gfzrbSytqlj", tRpt2gfzrb.getGfzrbSytqlj());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbZzs())) {      sql.setNullLong("gfzrbZzs");     } else {    sql.setLong("gfzrbZzs", tRpt2gfzrb.getGfzrbZzs());    }    if (tRpt2gfzrb.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRpt2gfzrb.getOpenDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRpt2gfzrbSVO tRpt2gfzrb=(TRpt2gfzrbSVO) vo;       Sql sql = new Sql("SELECT CREATE_DATE,GFZRB_DYLJ,GFZRB_OCS_DYLJ,GFZRB_OCS_RFZ,GFZRB_OCS_SYTQLJ,GFZRB_OCS_ZZS,GFZRB_QY,GFZRB_RFZ,GFZRB_SYTQLJ,GFZRB_ZZS,OPEN_DATE FROM T_RPT_2GFZRB WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tRpt2gfzrb =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tRpt2gfzrb = new TRpt2gfzrbSVO();           tRpt2gfzrb.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRpt2gfzrb.setGfzrbDylj(rs.getString("GFZRB_DYLJ"));           tRpt2gfzrb.setGfzrbOcsDylj(rs.getString("GFZRB_OCS_DYLJ"));           tRpt2gfzrb.setGfzrbOcsRfz(rs.getString("GFZRB_OCS_RFZ"));           tRpt2gfzrb.setGfzrbOcsSytqlj(rs.getString("GFZRB_OCS_SYTQLJ"));           tRpt2gfzrb.setGfzrbOcsZzs(rs.getString("GFZRB_OCS_ZZS"));           tRpt2gfzrb.setGfzrbQy(rs.getString("GFZRB_QY"));           tRpt2gfzrb.setGfzrbRfz(rs.getString("GFZRB_RFZ"));           tRpt2gfzrb.setGfzrbSytqlj(rs.getString("GFZRB_SYTQLJ"));           tRpt2gfzrb.setGfzrbZzs(rs.getString("GFZRB_ZZS"));           tRpt2gfzrb.setOpenDate(rs.getTimestamp("OPEN_DATE"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tRpt2gfzrb;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRpt2gfzrbSVO tRpt2gfzrb=(TRpt2gfzrbSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CREATE_DATE,GFZRB_DYLJ,GFZRB_OCS_DYLJ,GFZRB_OCS_RFZ,GFZRB_OCS_SYTQLJ,GFZRB_OCS_ZZS,GFZRB_QY,GFZRB_RFZ,GFZRB_SYTQLJ,GFZRB_ZZS,OPEN_DATE FROM T_RPT_2GFZRB WHERE 1=1 ");     try {if (tRpt2gfzrb.getFlagCreateDate() == 1) {      if (tRpt2gfzrb.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", tRpt2gfzrb.getCreateDate());          }   } if (tRpt2gfzrb.getFlagGfzrbDylj() == 1) {      if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbDylj())) {             sql.append(" and GFZRB_DYLJ is null ");          }      else{             sql.append(" and GFZRB_DYLJ=:gfzrbDylj");             sql.setLong("gfzrbDylj", tRpt2gfzrb.getGfzrbDylj());          }   } if (tRpt2gfzrb.getFlagGfzrbOcsDylj() == 1) {      if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbOcsDylj())) {             sql.append(" and GFZRB_OCS_DYLJ is null ");          }      else{             sql.append(" and GFZRB_OCS_DYLJ=:gfzrbOcsDylj");             sql.setLong("gfzrbOcsDylj", tRpt2gfzrb.getGfzrbOcsDylj());          }   } if (tRpt2gfzrb.getFlagGfzrbOcsRfz() == 1) {      if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbOcsRfz())) {             sql.append(" and GFZRB_OCS_RFZ is null ");          }      else{             sql.append(" and GFZRB_OCS_RFZ=:gfzrbOcsRfz");             sql.setLong("gfzrbOcsRfz", tRpt2gfzrb.getGfzrbOcsRfz());          }   } if (tRpt2gfzrb.getFlagGfzrbOcsSytqlj() == 1) {      if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbOcsSytqlj())) {             sql.append(" and GFZRB_OCS_SYTQLJ is null ");          }      else{             sql.append(" and GFZRB_OCS_SYTQLJ=:gfzrbOcsSytqlj");             sql.setLong("gfzrbOcsSytqlj", tRpt2gfzrb.getGfzrbOcsSytqlj());          }   } if (tRpt2gfzrb.getFlagGfzrbOcsZzs() == 1) {      if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbOcsZzs())) {             sql.append(" and GFZRB_OCS_ZZS is null ");          }      else{             sql.append(" and GFZRB_OCS_ZZS=:gfzrbOcsZzs");             sql.setLong("gfzrbOcsZzs", tRpt2gfzrb.getGfzrbOcsZzs());          }   } if (tRpt2gfzrb.getFlagGfzrbQy() == 1) {      if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbQy())) {             sql.append(" and GFZRB_QY is null ");          }      else{             sql.append(" and GFZRB_QY=:gfzrbQy");             sql.setString("gfzrbQy", tRpt2gfzrb.getGfzrbQy());          }   } if (tRpt2gfzrb.getFlagGfzrbRfz() == 1) {      if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbRfz())) {             sql.append(" and GFZRB_RFZ is null ");          }      else{             sql.append(" and GFZRB_RFZ=:gfzrbRfz");             sql.setLong("gfzrbRfz", tRpt2gfzrb.getGfzrbRfz());          }   } if (tRpt2gfzrb.getFlagGfzrbSytqlj() == 1) {      if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbSytqlj())) {             sql.append(" and GFZRB_SYTQLJ is null ");          }      else{             sql.append(" and GFZRB_SYTQLJ=:gfzrbSytqlj");             sql.setLong("gfzrbSytqlj", tRpt2gfzrb.getGfzrbSytqlj());          }   } if (tRpt2gfzrb.getFlagGfzrbZzs() == 1) {      if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbZzs())) {             sql.append(" and GFZRB_ZZS is null ");          }      else{             sql.append(" and GFZRB_ZZS=:gfzrbZzs");             sql.setLong("gfzrbZzs", tRpt2gfzrb.getGfzrbZzs());          }   } if (tRpt2gfzrb.getFlagOpenDate() == 1) {      if (tRpt2gfzrb.getOpenDate() == null) {             sql.append(" and OPEN_DATE is null ");          }      else{             sql.append(" and OPEN_DATE=:openDate");             sql.setTimestamp("openDate", tRpt2gfzrb.getOpenDate());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tRpt2gfzrb = new TRpt2gfzrbSVO();           tRpt2gfzrb.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRpt2gfzrb.setGfzrbDylj(rs.getString("GFZRB_DYLJ"));           tRpt2gfzrb.setGfzrbOcsDylj(rs.getString("GFZRB_OCS_DYLJ"));           tRpt2gfzrb.setGfzrbOcsRfz(rs.getString("GFZRB_OCS_RFZ"));           tRpt2gfzrb.setGfzrbOcsSytqlj(rs.getString("GFZRB_OCS_SYTQLJ"));           tRpt2gfzrb.setGfzrbOcsZzs(rs.getString("GFZRB_OCS_ZZS"));           tRpt2gfzrb.setGfzrbQy(rs.getString("GFZRB_QY"));           tRpt2gfzrb.setGfzrbRfz(rs.getString("GFZRB_RFZ"));           tRpt2gfzrb.setGfzrbSytqlj(rs.getString("GFZRB_SYTQLJ"));           tRpt2gfzrb.setGfzrbZzs(rs.getString("GFZRB_ZZS"));           tRpt2gfzrb.setOpenDate(rs.getTimestamp("OPEN_DATE"));               res.add(tRpt2gfzrb);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRpt2gfzrbSVO tRpt2gfzrb=(TRpt2gfzrbSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE T_RPT_2GFZRB SET ");     try {if (tRpt2gfzrb.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", tRpt2gfzrb.getCreateDate()); } if (tRpt2gfzrb.getFlagGfzrbDylj() == 1) {sql.append("GFZRB_DYLJ=:gfzrbDylj,");sql.setLong("gfzrbDylj", tRpt2gfzrb.getGfzrbDylj()); } if (tRpt2gfzrb.getFlagGfzrbOcsDylj() == 1) {sql.append("GFZRB_OCS_DYLJ=:gfzrbOcsDylj,");sql.setLong("gfzrbOcsDylj", tRpt2gfzrb.getGfzrbOcsDylj()); } if (tRpt2gfzrb.getFlagGfzrbOcsRfz() == 1) {sql.append("GFZRB_OCS_RFZ=:gfzrbOcsRfz,");sql.setLong("gfzrbOcsRfz", tRpt2gfzrb.getGfzrbOcsRfz()); } if (tRpt2gfzrb.getFlagGfzrbOcsSytqlj() == 1) {sql.append("GFZRB_OCS_SYTQLJ=:gfzrbOcsSytqlj,");sql.setLong("gfzrbOcsSytqlj", tRpt2gfzrb.getGfzrbOcsSytqlj()); } if (tRpt2gfzrb.getFlagGfzrbOcsZzs() == 1) {sql.append("GFZRB_OCS_ZZS=:gfzrbOcsZzs,");sql.setLong("gfzrbOcsZzs", tRpt2gfzrb.getGfzrbOcsZzs()); } if (tRpt2gfzrb.getFlagGfzrbQy() == 1) {sql.append("GFZRB_QY=:gfzrbQy,"); sql.setString("gfzrbQy", tRpt2gfzrb.getGfzrbQy()); } if (tRpt2gfzrb.getFlagGfzrbRfz() == 1) {sql.append("GFZRB_RFZ=:gfzrbRfz,");sql.setLong("gfzrbRfz", tRpt2gfzrb.getGfzrbRfz()); } if (tRpt2gfzrb.getFlagGfzrbSytqlj() == 1) {sql.append("GFZRB_SYTQLJ=:gfzrbSytqlj,");sql.setLong("gfzrbSytqlj", tRpt2gfzrb.getGfzrbSytqlj()); } if (tRpt2gfzrb.getFlagGfzrbZzs() == 1) {sql.append("GFZRB_ZZS=:gfzrbZzs,");sql.setLong("gfzrbZzs", tRpt2gfzrb.getGfzrbZzs()); } if (tRpt2gfzrb.getFlagOpenDate() == 1) {sql.append("OPEN_DATE=:openDate,"); sql.setTimestamp("openDate", tRpt2gfzrb.getOpenDate()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_2GFZRB(CREATE_DATE,GFZRB_DYLJ,GFZRB_OCS_DYLJ,GFZRB_OCS_RFZ,GFZRB_OCS_SYTQLJ,GFZRB_OCS_ZZS,GFZRB_QY,GFZRB_RFZ,GFZRB_SYTQLJ,GFZRB_ZZS,OPEN_DATE)");sql.append(" VALUES (:createDate,:gfzrbDylj,:gfzrbOcsDylj,:gfzrbOcsRfz,:gfzrbOcsSytqlj,:gfzrbOcsZzs,:gfzrbQy,:gfzrbRfz,:gfzrbSytqlj,:gfzrbZzs,:openDate)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TRpt2gfzrbSVO tRpt2gfzrb=(TRpt2gfzrbSVO) list.get(i);         if (tRpt2gfzrb== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }   if (tRpt2gfzrb.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRpt2gfzrb.getCreateDate());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbDylj())) {      sql.setNullLong("gfzrbDylj");     } else {    sql.setLong("gfzrbDylj", tRpt2gfzrb.getGfzrbDylj());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbOcsDylj())) {      sql.setNullLong("gfzrbOcsDylj");     } else {    sql.setLong("gfzrbOcsDylj", tRpt2gfzrb.getGfzrbOcsDylj());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbOcsRfz())) {      sql.setNullLong("gfzrbOcsRfz");     } else {    sql.setLong("gfzrbOcsRfz", tRpt2gfzrb.getGfzrbOcsRfz());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbOcsSytqlj())) {      sql.setNullLong("gfzrbOcsSytqlj");     } else {    sql.setLong("gfzrbOcsSytqlj", tRpt2gfzrb.getGfzrbOcsSytqlj());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbOcsZzs())) {      sql.setNullLong("gfzrbOcsZzs");     } else {    sql.setLong("gfzrbOcsZzs", tRpt2gfzrb.getGfzrbOcsZzs());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbQy())) {      sql.setNullString("gfzrbQy");     } else {    sql.setString("gfzrbQy", tRpt2gfzrb.getGfzrbQy());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbRfz())) {      sql.setNullLong("gfzrbRfz");     } else {    sql.setLong("gfzrbRfz", tRpt2gfzrb.getGfzrbRfz());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbSytqlj())) {      sql.setNullLong("gfzrbSytqlj");     } else {    sql.setLong("gfzrbSytqlj", tRpt2gfzrb.getGfzrbSytqlj());    }       if (StringUtil.isBlank(tRpt2gfzrb.getGfzrbZzs())) {      sql.setNullLong("gfzrbZzs");     } else {    sql.setLong("gfzrbZzs", tRpt2gfzrb.getGfzrbZzs());    }    if (tRpt2gfzrb.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRpt2gfzrb.getOpenDate());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRpt2gfzrbSVO tRpt2gfzrb=(TRpt2gfzrbSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM T_RPT_2GFZRB WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TRpt2gfzrbSVO tRpt2gfzrb=(TRpt2gfzrbSVO) vo;       }}
