package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.IWoHandleSDAO;import com.cattsoft.tm.vo.WoHandleSVO;import com.cattsoft.pub.util.CollectionFactory;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil;/** * 方法WoHandleSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class WoHandleSDAOImpl implements IWoHandleSDAO {	private static Logger log = Logger.getLogger(WoHandleSDAOImpl.class);	private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WoHandleSVO woHandle = (WoHandleSVO) vo;		if (StringUtil.isBlank(woHandle.getWoHandleId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO WO_HANDLE(FAIL_REASON_ID,HANDLE_DATE,HANDLE_RATE,HANDLE_TYPE_ID,LOCAL_NET_ID,OVERTIME_ID,REMARKS,SO_NBR,STAFF_ID,WORK_AREA_ID,WO_HANDLE_ID,WO_NBR,WO_STAFF_ID)");		sql				.append(" VALUES (:failReasonId,:handleDate,:handleRate,:handleTypeId,:localNetId,:overtimeId,:remarks,:soNbr,:staffId,:workAreaId,:woHandleId,:woNbr,:woStaffId)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(woHandle.getFailReasonId())) {				sql.setNullString("failReasonId");			} else {				sql.setString("failReasonId", woHandle.getFailReasonId());			}			if (woHandle.getHandleDate() == null) {				sql.setNullDate("handleDate");			} else {				sql.setTimestamp("handleDate", woHandle.getHandleDate());			}			if (StringUtil.isBlank(woHandle.getHandleRate())) {				sql.setNullString("handleRate");			} else {				sql.setString("handleRate", woHandle.getHandleRate());			}			if (StringUtil.isBlank(woHandle.getHandleTypeId())) {				sql.setNullLong("handleTypeId");			} else {				sql.setLong("handleTypeId", woHandle.getHandleTypeId());			}			if (StringUtil.isBlank(woHandle.getLocalNetId())) {				sql.setNullLong("localNetId");			} else {				sql.setLong("localNetId", woHandle.getLocalNetId());			}			if (StringUtil.isBlank(woHandle.getOvertimeId())) {				sql.setNullString("overtimeId");			} else {				sql.setString("overtimeId", woHandle.getOvertimeId());			}			if (StringUtil.isBlank(woHandle.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", woHandle.getRemarks());			}			if (StringUtil.isBlank(woHandle.getSoNbr())) {				sql.setNullString("soNbr");			} else {				sql.setString("soNbr", woHandle.getSoNbr());			}			if (StringUtil.isBlank(woHandle.getStaffId())) {				sql.setNullString("staffId");			} else {				sql.setString("staffId", woHandle.getStaffId());			}			if (StringUtil.isBlank(woHandle.getWorkAreaId())) {				sql.setNullLong("workAreaId");			} else {				sql.setLong("workAreaId", woHandle.getWorkAreaId());			}			if (StringUtil.isBlank(woHandle.getWoHandleId())) {				sql.setNullLong("woHandleId");			} else {				sql.setLong("woHandleId", woHandle.getWoHandleId());			}			if (StringUtil.isBlank(woHandle.getWoNbr())) {				sql.setNullLong("woNbr");			} else {				sql.setLong("woNbr", woHandle.getWoNbr());			}			if (StringUtil.isBlank(woHandle.getWoStaffId())) {				sql.setNullString("woStaffId");			} else {				sql.setString("woStaffId", woHandle.getWoStaffId());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WoHandleSVO woHandle = (WoHandleSVO) vo;		if (StringUtil.isBlank(woHandle.getWoHandleId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT FAIL_REASON_ID,HANDLE_DATE,HANDLE_RATE,HANDLE_TYPE_ID,LOCAL_NET_ID,OVERTIME_ID,REMARKS,SO_NBR,STAFF_ID,WORK_AREA_ID,WO_HANDLE_ID,WO_NBR,WO_STAFF_ID FROM WO_HANDLE WHERE 1=1  ");		sql.append(" and WO_HANDLE_ID=:woHandleId");		sql.setLong("woHandleId", woHandle.getWoHandleId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		woHandle = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				woHandle = new WoHandleSVO();				woHandle.setFailReasonId(rs.getString("FAIL_REASON_ID"));				woHandle.setHandleDate(rs.getTimestamp("HANDLE_DATE"));				woHandle.setHandleRate(rs.getString("HANDLE_RATE"));				woHandle.setHandleTypeId(rs.getString("HANDLE_TYPE_ID"));				woHandle.setLocalNetId(rs.getString("LOCAL_NET_ID"));				woHandle.setOvertimeId(rs.getString("OVERTIME_ID"));				woHandle.setRemarks(rs.getString("REMARKS"));				woHandle.setSoNbr(rs.getString("SO_NBR"));				woHandle.setStaffId(rs.getString("STAFF_ID"));				woHandle.setWorkAreaId(rs.getString("WORK_AREA_ID"));				woHandle.setWoHandleId(rs.getString("WO_HANDLE_ID"));				woHandle.setWoNbr(rs.getString("WO_NBR"));				woHandle.setWoStaffId(rs.getString("WO_STAFF_ID"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return woHandle;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WoHandleSVO woHandle = (WoHandleSVO) vo;		List res = (List)CollectionFactory.createCollection(CollectionFactory.COLLECTION_LIST);		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT FAIL_REASON_ID,HANDLE_DATE,HANDLE_RATE,HANDLE_TYPE_ID,LOCAL_NET_ID,OVERTIME_ID,REMARKS,SO_NBR,STAFF_ID,WORK_AREA_ID,WO_HANDLE_ID,WO_NBR,WO_STAFF_ID FROM WO_HANDLE WHERE 1=1 ");		try {			if (woHandle.getFlagFailReasonId() == 1) {				if (StringUtil.isBlank(woHandle.getFailReasonId())) {					sql.append(" and FAIL_REASON_ID is null ");				} else {					sql.append(" and FAIL_REASON_ID=:failReasonId");					sql.setString("failReasonId", woHandle.getFailReasonId());				}			}			if (woHandle.getFlagHandleDate() == 1) {				if (woHandle.getHandleDate() == null) {					sql.append(" and HANDLE_DATE is null ");				} else {					sql.append(" and HANDLE_DATE=:handleDate");					sql.setTimestamp("handleDate", woHandle.getHandleDate());				}			}			if (woHandle.getFlagHandleRate() == 1) {				if (StringUtil.isBlank(woHandle.getHandleRate())) {					sql.append(" and HANDLE_RATE is null ");				} else {					sql.append(" and HANDLE_RATE=:handleRate");					sql.setString("handleRate", woHandle.getHandleRate());				}			}			if (woHandle.getFlagHandleTypeId() == 1) {				if (StringUtil.isBlank(woHandle.getHandleTypeId())) {					sql.append(" and HANDLE_TYPE_ID is null ");				} else {					sql.append(" and HANDLE_TYPE_ID=:handleTypeId");					sql.setLong("handleTypeId", woHandle.getHandleTypeId());				}			}			if (woHandle.getFlagLocalNetId() == 1) {				if (StringUtil.isBlank(woHandle.getLocalNetId())) {					sql.append(" and LOCAL_NET_ID is null ");				} else {					sql.append(" and LOCAL_NET_ID=:localNetId");					sql.setLong("localNetId", woHandle.getLocalNetId());				}			}			if (woHandle.getFlagOvertimeId() == 1) {				if (StringUtil.isBlank(woHandle.getOvertimeId())) {					sql.append(" and OVERTIME_ID is null ");				} else {					sql.append(" and OVERTIME_ID=:overtimeId");					sql.setString("overtimeId", woHandle.getOvertimeId());				}			}			if (woHandle.getFlagRemarks() == 1) {				if (StringUtil.isBlank(woHandle.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", woHandle.getRemarks());				}			}			if (woHandle.getFlagSoNbr() == 1) {				if (StringUtil.isBlank(woHandle.getSoNbr())) {					sql.append(" and SO_NBR is null ");				} else {					sql.append(" and SO_NBR=:soNbr");					sql.setString("soNbr", woHandle.getSoNbr());				}			}			if (woHandle.getFlagStaffId() == 1) {				if (StringUtil.isBlank(woHandle.getStaffId())) {					sql.append(" and STAFF_ID is null ");				} else {					sql.append(" and STAFF_ID=:staffId");					sql.setString("staffId", woHandle.getStaffId());				}			}			if (woHandle.getFlagWorkAreaId() == 1) {				if (StringUtil.isBlank(woHandle.getWorkAreaId())) {					sql.append(" and WORK_AREA_ID is null ");				} else {					sql.append(" and WORK_AREA_ID=:workAreaId");					sql.setLong("workAreaId", woHandle.getWorkAreaId());				}			}			if (woHandle.getFlagWoHandleId() == 1) {				if (StringUtil.isBlank(woHandle.getWoHandleId())) {					sql.append(" and WO_HANDLE_ID is null ");				} else {					sql.append(" and WO_HANDLE_ID=:woHandleId");					sql.setLong("woHandleId", woHandle.getWoHandleId());				}			}			if (woHandle.getFlagWoNbr() == 1) {				if (StringUtil.isBlank(woHandle.getWoNbr())) {					sql.append(" and WO_NBR is null ");				} else {					sql.append(" and WO_NBR=:woNbr");					sql.setLong("woNbr", woHandle.getWoNbr());				}			}			if (woHandle.getFlagWoStaffId() == 1) {				if (StringUtil.isBlank(woHandle.getWoStaffId())) {					sql.append(" and WO_STAFF_ID is null ");				} else {					sql.append(" and WO_STAFF_ID=:woStaffId");					sql.setString("woStaffId", woHandle.getWoStaffId());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				woHandle = new WoHandleSVO();				woHandle.setFailReasonId(rs.getString("FAIL_REASON_ID"));				woHandle.setHandleDate(rs.getTimestamp("HANDLE_DATE"));				woHandle.setHandleRate(rs.getString("HANDLE_RATE"));				woHandle.setHandleTypeId(rs.getString("HANDLE_TYPE_ID"));				woHandle.setLocalNetId(rs.getString("LOCAL_NET_ID"));				woHandle.setOvertimeId(rs.getString("OVERTIME_ID"));				woHandle.setRemarks(rs.getString("REMARKS"));				woHandle.setSoNbr(rs.getString("SO_NBR"));				woHandle.setStaffId(rs.getString("STAFF_ID"));				woHandle.setWorkAreaId(rs.getString("WORK_AREA_ID"));				woHandle.setWoHandleId(rs.getString("WO_HANDLE_ID"));				woHandle.setWoNbr(rs.getString("WO_NBR"));				woHandle.setWoStaffId(rs.getString("WO_STAFF_ID"));				res.add(woHandle);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WoHandleSVO woHandle = (WoHandleSVO) vo;		if (StringUtil.isBlank(woHandle.getWoHandleId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE WO_HANDLE SET ");		try {			if (woHandle.getFlagFailReasonId() == 1) {				sql.append("FAIL_REASON_ID=:failReasonId,");				sql.setString("failReasonId", woHandle.getFailReasonId());			}			if (woHandle.getFlagHandleDate() == 1) {				sql.append("HANDLE_DATE=:handleDate,");				sql.setTimestamp("handleDate", woHandle.getHandleDate());			}			if (woHandle.getFlagHandleRate() == 1) {				sql.append("HANDLE_RATE=:handleRate,");				sql.setString("handleRate", woHandle.getHandleRate());			}			if (woHandle.getFlagHandleTypeId() == 1) {				sql.append("HANDLE_TYPE_ID=:handleTypeId,");				sql.setLong("handleTypeId", woHandle.getHandleTypeId());			}			if (woHandle.getFlagLocalNetId() == 1) {				sql.append("LOCAL_NET_ID=:localNetId,");				sql.setLong("localNetId", woHandle.getLocalNetId());			}			if (woHandle.getFlagOvertimeId() == 1) {				sql.append("OVERTIME_ID=:overtimeId,");				sql.setString("overtimeId", woHandle.getOvertimeId());			}			if (woHandle.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", woHandle.getRemarks());			}			if (woHandle.getFlagSoNbr() == 1) {				sql.append("SO_NBR=:soNbr,");				sql.setString("soNbr", woHandle.getSoNbr());			}			if (woHandle.getFlagStaffId() == 1) {				sql.append("STAFF_ID=:staffId,");				sql.setString("staffId", woHandle.getStaffId());			}			if (woHandle.getFlagWorkAreaId() == 1) {				sql.append("WORK_AREA_ID=:workAreaId,");				sql.setLong("workAreaId", woHandle.getWorkAreaId());			}			if (woHandle.getFlagWoNbr() == 1) {				sql.append("WO_NBR=:woNbr,");				sql.setLong("woNbr", woHandle.getWoNbr());			}			if (woHandle.getFlagWoStaffId() == 1) {				sql.append("WO_STAFF_ID=:woStaffId,");				sql.setString("woStaffId", woHandle.getWoStaffId());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and WO_HANDLE_ID=:woHandleId");			sql.setLong("woHandleId", woHandle.getWoHandleId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO WO_HANDLE(FAIL_REASON_ID,HANDLE_DATE,HANDLE_RATE,HANDLE_TYPE_ID,LOCAL_NET_ID,OVERTIME_ID,REMARKS,SO_NBR,STAFF_ID,WORK_AREA_ID,WO_HANDLE_ID,WO_NBR,WO_STAFF_ID)");		sql				.append(" VALUES (:failReasonId,:handleDate,:handleRate,:handleTypeId,:localNetId,:overtimeId,:remarks,:soNbr,:staffId,:workAreaId,:woHandleId,:woNbr,:woStaffId)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				WoHandleSVO woHandle = (WoHandleSVO) list.get(i);				if (woHandle == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(woHandle.getWoHandleId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(woHandle.getFailReasonId())) {					sql.setNullString("failReasonId");				} else {					sql.setString("failReasonId", woHandle.getFailReasonId());				}				if (woHandle.getHandleDate() == null) {					sql.setNullDate("handleDate");				} else {					sql.setTimestamp("handleDate", woHandle.getHandleDate());				}				if (StringUtil.isBlank(woHandle.getHandleRate())) {					sql.setNullString("handleRate");				} else {					sql.setString("handleRate", woHandle.getHandleRate());				}				if (StringUtil.isBlank(woHandle.getHandleTypeId())) {					sql.setNullLong("handleTypeId");				} else {					sql.setLong("handleTypeId", woHandle.getHandleTypeId());				}				if (StringUtil.isBlank(woHandle.getLocalNetId())) {					sql.setNullLong("localNetId");				} else {					sql.setLong("localNetId", woHandle.getLocalNetId());				}				if (StringUtil.isBlank(woHandle.getOvertimeId())) {					sql.setNullString("overtimeId");				} else {					sql.setString("overtimeId", woHandle.getOvertimeId());				}				if (StringUtil.isBlank(woHandle.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", woHandle.getRemarks());				}				if (StringUtil.isBlank(woHandle.getSoNbr())) {					sql.setNullString("soNbr");				} else {					sql.setString("soNbr", woHandle.getSoNbr());				}				if (StringUtil.isBlank(woHandle.getStaffId())) {					sql.setNullString("staffId");				} else {					sql.setString("staffId", woHandle.getStaffId());				}				if (StringUtil.isBlank(woHandle.getWorkAreaId())) {					sql.setNullLong("workAreaId");				} else {					sql.setLong("workAreaId", woHandle.getWorkAreaId());				}				if (StringUtil.isBlank(woHandle.getWoHandleId())) {					sql.setNullLong("woHandleId");				} else {					sql.setLong("woHandleId", woHandle.getWoHandleId());				}				if (StringUtil.isBlank(woHandle.getWoNbr())) {					sql.setNullLong("woNbr");				} else {					sql.setLong("woNbr", woHandle.getWoNbr());				}				if (StringUtil.isBlank(woHandle.getWoStaffId())) {					sql.setNullString("woStaffId");				} else {					sql.setString("woStaffId", woHandle.getWoStaffId());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WoHandleSVO woHandle = (WoHandleSVO) vo;		if (StringUtil.isBlank(woHandle.getWoHandleId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM WO_HANDLE WHERE 1=1  ");		sql.append(" and WO_HANDLE_ID=:woHandleId");		sql.setLong("woHandleId", woHandle.getWoHandleId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		WoHandleSVO woHandle = (WoHandleSVO) vo;	}	/**	 * 查询局向。	 * 	 * @return String ： 查询的SQL。	 */	public String query(String workAreaId) throws AppException, SysException {		if (workAreaId == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		String exchId = null;		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql("select EXCH_ID FROM WORK_AREA_EXCH WHERE 1=1  ");		sql.append(" and WORK_AREA_ID=:workAreaId");		sql.setLong("workAreaId", workAreaId);		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				exchId = rs.getString("EXCH_ID");				break;			}			return exchId;		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}}