package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ITRptWgybKdyfzbbSDAO;import com.cattsoft.tm.vo.TRptWgybKdyfzbbSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TRptWgybKdyfzbbSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TRptWgybKdyfzbbSDAOImpl implements ITRptWgybKdyfzbbSDAO{    private static Logger log = Logger.getLogger(TRptWgybKdyfzbbSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptWgybKdyfzbbSVO tRptWgybKdyfzbb=(TRptWgybKdyfzbbSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_WGYB_KDYFZBB(CREATE_DATE,LDL,OPEN_DATE,QZHTLZ,QZWGLZ,QZWLZ,QZZYTLZ,WG_CODE,WG_MC)");sql.append(" VALUES (:createDate,:ldl,:openDate,:qzhtlz,:qzwglz,:qzwlz,:qzzytlz,:wgCode,:wgMc)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (tRptWgybKdyfzbb.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRptWgybKdyfzbb.getCreateDate());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getLdl())) {      sql.setNullLong("ldl");     } else {    sql.setLong("ldl", tRptWgybKdyfzbb.getLdl());    }    if (tRptWgybKdyfzbb.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRptWgybKdyfzbb.getOpenDate());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getQzhtlz())) {      sql.setNullLong("qzhtlz");     } else {    sql.setLong("qzhtlz", tRptWgybKdyfzbb.getQzhtlz());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getQzwglz())) {      sql.setNullLong("qzwglz");     } else {    sql.setLong("qzwglz", tRptWgybKdyfzbb.getQzwglz());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getQzwlz())) {      sql.setNullLong("qzwlz");     } else {    sql.setLong("qzwlz", tRptWgybKdyfzbb.getQzwlz());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getQzzytlz())) {      sql.setNullLong("qzzytlz");     } else {    sql.setLong("qzzytlz", tRptWgybKdyfzbb.getQzzytlz());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getWgCode())) {      sql.setNullString("wgCode");     } else {    sql.setString("wgCode", tRptWgybKdyfzbb.getWgCode());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getWgMc())) {      sql.setNullString("wgMc");     } else {    sql.setString("wgMc", tRptWgybKdyfzbb.getWgMc());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptWgybKdyfzbbSVO tRptWgybKdyfzbb=(TRptWgybKdyfzbbSVO) vo;       Sql sql = new Sql("SELECT CREATE_DATE,LDL,OPEN_DATE,QZHTLZ,QZWGLZ,QZWLZ,QZZYTLZ,WG_CODE,WG_MC FROM T_RPT_WGYB_KDYFZBB WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tRptWgybKdyfzbb =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tRptWgybKdyfzbb = new TRptWgybKdyfzbbSVO();           tRptWgybKdyfzbb.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRptWgybKdyfzbb.setLdl(rs.getString("LDL"));           tRptWgybKdyfzbb.setOpenDate(rs.getTimestamp("OPEN_DATE"));           tRptWgybKdyfzbb.setQzhtlz(rs.getString("QZHTLZ"));           tRptWgybKdyfzbb.setQzwglz(rs.getString("QZWGLZ"));           tRptWgybKdyfzbb.setQzwlz(rs.getString("QZWLZ"));           tRptWgybKdyfzbb.setQzzytlz(rs.getString("QZZYTLZ"));           tRptWgybKdyfzbb.setWgCode(rs.getString("WG_CODE"));           tRptWgybKdyfzbb.setWgMc(rs.getString("WG_MC"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tRptWgybKdyfzbb;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRptWgybKdyfzbbSVO tRptWgybKdyfzbb=(TRptWgybKdyfzbbSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CREATE_DATE,LDL,OPEN_DATE,QZHTLZ,QZWGLZ,QZWLZ,QZZYTLZ,WG_CODE,WG_MC FROM T_RPT_WGYB_KDYFZBB WHERE 1=1 ");     try {if (tRptWgybKdyfzbb.getFlagCreateDate() == 1) {      if (tRptWgybKdyfzbb.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", tRptWgybKdyfzbb.getCreateDate());          }   } if (tRptWgybKdyfzbb.getFlagLdl() == 1) {      if (StringUtil.isBlank(tRptWgybKdyfzbb.getLdl())) {             sql.append(" and LDL is null ");          }      else{             sql.append(" and LDL=:ldl");             sql.setLong("ldl", tRptWgybKdyfzbb.getLdl());          }   } if (tRptWgybKdyfzbb.getFlagOpenDate() == 1) {      if (tRptWgybKdyfzbb.getOpenDate() == null) {             sql.append(" and OPEN_DATE is null ");          }      else{             sql.append(" and OPEN_DATE=:openDate");             sql.setTimestamp("openDate", tRptWgybKdyfzbb.getOpenDate());          }   } if (tRptWgybKdyfzbb.getFlagQzhtlz() == 1) {      if (StringUtil.isBlank(tRptWgybKdyfzbb.getQzhtlz())) {             sql.append(" and QZHTLZ is null ");          }      else{             sql.append(" and QZHTLZ=:qzhtlz");             sql.setLong("qzhtlz", tRptWgybKdyfzbb.getQzhtlz());          }   } if (tRptWgybKdyfzbb.getFlagQzwglz() == 1) {      if (StringUtil.isBlank(tRptWgybKdyfzbb.getQzwglz())) {             sql.append(" and QZWGLZ is null ");          }      else{             sql.append(" and QZWGLZ=:qzwglz");             sql.setLong("qzwglz", tRptWgybKdyfzbb.getQzwglz());          }   } if (tRptWgybKdyfzbb.getFlagQzwlz() == 1) {      if (StringUtil.isBlank(tRptWgybKdyfzbb.getQzwlz())) {             sql.append(" and QZWLZ is null ");          }      else{             sql.append(" and QZWLZ=:qzwlz");             sql.setLong("qzwlz", tRptWgybKdyfzbb.getQzwlz());          }   } if (tRptWgybKdyfzbb.getFlagQzzytlz() == 1) {      if (StringUtil.isBlank(tRptWgybKdyfzbb.getQzzytlz())) {             sql.append(" and QZZYTLZ is null ");          }      else{             sql.append(" and QZZYTLZ=:qzzytlz");             sql.setLong("qzzytlz", tRptWgybKdyfzbb.getQzzytlz());          }   } if (tRptWgybKdyfzbb.getFlagWgCode() == 1) {      if (StringUtil.isBlank(tRptWgybKdyfzbb.getWgCode())) {             sql.append(" and WG_CODE is null ");          }      else{             sql.append(" and WG_CODE=:wgCode");             sql.setString("wgCode", tRptWgybKdyfzbb.getWgCode());          }   } if (tRptWgybKdyfzbb.getFlagWgMc() == 1) {      if (StringUtil.isBlank(tRptWgybKdyfzbb.getWgMc())) {             sql.append(" and WG_MC is null ");          }      else{             sql.append(" and WG_MC=:wgMc");             sql.setString("wgMc", tRptWgybKdyfzbb.getWgMc());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tRptWgybKdyfzbb = new TRptWgybKdyfzbbSVO();           tRptWgybKdyfzbb.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRptWgybKdyfzbb.setLdl(rs.getString("LDL"));           tRptWgybKdyfzbb.setOpenDate(rs.getTimestamp("OPEN_DATE"));           tRptWgybKdyfzbb.setQzhtlz(rs.getString("QZHTLZ"));           tRptWgybKdyfzbb.setQzwglz(rs.getString("QZWGLZ"));           tRptWgybKdyfzbb.setQzwlz(rs.getString("QZWLZ"));           tRptWgybKdyfzbb.setQzzytlz(rs.getString("QZZYTLZ"));           tRptWgybKdyfzbb.setWgCode(rs.getString("WG_CODE"));           tRptWgybKdyfzbb.setWgMc(rs.getString("WG_MC"));               res.add(tRptWgybKdyfzbb);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRptWgybKdyfzbbSVO tRptWgybKdyfzbb=(TRptWgybKdyfzbbSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE T_RPT_WGYB_KDYFZBB SET ");     try {if (tRptWgybKdyfzbb.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", tRptWgybKdyfzbb.getCreateDate()); } if (tRptWgybKdyfzbb.getFlagLdl() == 1) {sql.append("LDL=:ldl,");sql.setLong("ldl", tRptWgybKdyfzbb.getLdl()); } if (tRptWgybKdyfzbb.getFlagOpenDate() == 1) {sql.append("OPEN_DATE=:openDate,"); sql.setTimestamp("openDate", tRptWgybKdyfzbb.getOpenDate()); } if (tRptWgybKdyfzbb.getFlagQzhtlz() == 1) {sql.append("QZHTLZ=:qzhtlz,");sql.setLong("qzhtlz", tRptWgybKdyfzbb.getQzhtlz()); } if (tRptWgybKdyfzbb.getFlagQzwglz() == 1) {sql.append("QZWGLZ=:qzwglz,");sql.setLong("qzwglz", tRptWgybKdyfzbb.getQzwglz()); } if (tRptWgybKdyfzbb.getFlagQzwlz() == 1) {sql.append("QZWLZ=:qzwlz,");sql.setLong("qzwlz", tRptWgybKdyfzbb.getQzwlz()); } if (tRptWgybKdyfzbb.getFlagQzzytlz() == 1) {sql.append("QZZYTLZ=:qzzytlz,");sql.setLong("qzzytlz", tRptWgybKdyfzbb.getQzzytlz()); } if (tRptWgybKdyfzbb.getFlagWgCode() == 1) {sql.append("WG_CODE=:wgCode,"); sql.setString("wgCode", tRptWgybKdyfzbb.getWgCode()); } if (tRptWgybKdyfzbb.getFlagWgMc() == 1) {sql.append("WG_MC=:wgMc,"); sql.setString("wgMc", tRptWgybKdyfzbb.getWgMc()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_WGYB_KDYFZBB(CREATE_DATE,LDL,OPEN_DATE,QZHTLZ,QZWGLZ,QZWLZ,QZZYTLZ,WG_CODE,WG_MC)");sql.append(" VALUES (:createDate,:ldl,:openDate,:qzhtlz,:qzwglz,:qzwlz,:qzzytlz,:wgCode,:wgMc)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TRptWgybKdyfzbbSVO tRptWgybKdyfzbb=(TRptWgybKdyfzbbSVO) list.get(i);         if (tRptWgybKdyfzbb== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }   if (tRptWgybKdyfzbb.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRptWgybKdyfzbb.getCreateDate());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getLdl())) {      sql.setNullLong("ldl");     } else {    sql.setLong("ldl", tRptWgybKdyfzbb.getLdl());    }    if (tRptWgybKdyfzbb.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRptWgybKdyfzbb.getOpenDate());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getQzhtlz())) {      sql.setNullLong("qzhtlz");     } else {    sql.setLong("qzhtlz", tRptWgybKdyfzbb.getQzhtlz());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getQzwglz())) {      sql.setNullLong("qzwglz");     } else {    sql.setLong("qzwglz", tRptWgybKdyfzbb.getQzwglz());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getQzwlz())) {      sql.setNullLong("qzwlz");     } else {    sql.setLong("qzwlz", tRptWgybKdyfzbb.getQzwlz());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getQzzytlz())) {      sql.setNullLong("qzzytlz");     } else {    sql.setLong("qzzytlz", tRptWgybKdyfzbb.getQzzytlz());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getWgCode())) {      sql.setNullString("wgCode");     } else {    sql.setString("wgCode", tRptWgybKdyfzbb.getWgCode());    }       if (StringUtil.isBlank(tRptWgybKdyfzbb.getWgMc())) {      sql.setNullString("wgMc");     } else {    sql.setString("wgMc", tRptWgybKdyfzbb.getWgMc());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptWgybKdyfzbbSVO tRptWgybKdyfzbb=(TRptWgybKdyfzbbSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM T_RPT_WGYB_KDYFZBB WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TRptWgybKdyfzbbSVO tRptWgybKdyfzbb=(TRptWgybKdyfzbbSVO) vo;       }}
