package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ITRptJtbbQsfzrbSDAO;import com.cattsoft.tm.vo.TRptJtbbQsfzrbSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法TRptJtbbQsfzrbSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class TRptJtbbQsfzrbSDAOImpl implements ITRptJtbbQsfzrbSDAO{    private static Logger log = Logger.getLogger(TRptJtbbQsfzrbSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptJtbbQsfzrbSVO tRptJtbbQsfzrb=(TRptJtbbQsfzrbSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_JTBB_QSFZRB(CP_MC,CREATE_DATE,FGS,OPEN_DATE,QGS)");sql.append(" VALUES (:cpMc,:createDate,:fgs,:openDate,:qgs)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(tRptJtbbQsfzrb.getCpMc())) {      sql.setNullString("cpMc");     } else {    sql.setString("cpMc", tRptJtbbQsfzrb.getCpMc());    }    if (tRptJtbbQsfzrb.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRptJtbbQsfzrb.getCreateDate());    }       if (StringUtil.isBlank(tRptJtbbQsfzrb.getFgs())) {      sql.setNullLong("fgs");     } else {    sql.setLong("fgs", tRptJtbbQsfzrb.getFgs());    }    if (tRptJtbbQsfzrb.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRptJtbbQsfzrb.getOpenDate());    }       if (StringUtil.isBlank(tRptJtbbQsfzrb.getQgs())) {      sql.setNullLong("qgs");     } else {    sql.setLong("qgs", tRptJtbbQsfzrb.getQgs());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptJtbbQsfzrbSVO tRptJtbbQsfzrb=(TRptJtbbQsfzrbSVO) vo;       Sql sql = new Sql("SELECT CP_MC,CREATE_DATE,FGS,OPEN_DATE,QGS FROM T_RPT_JTBB_QSFZRB WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      tRptJtbbQsfzrb =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           tRptJtbbQsfzrb = new TRptJtbbQsfzrbSVO();           tRptJtbbQsfzrb.setCpMc(rs.getString("CP_MC"));           tRptJtbbQsfzrb.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRptJtbbQsfzrb.setFgs(rs.getString("FGS"));           tRptJtbbQsfzrb.setOpenDate(rs.getTimestamp("OPEN_DATE"));           tRptJtbbQsfzrb.setQgs(rs.getString("QGS"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return tRptJtbbQsfzrb;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRptJtbbQsfzrbSVO tRptJtbbQsfzrb=(TRptJtbbQsfzrbSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CP_MC,CREATE_DATE,FGS,OPEN_DATE,QGS FROM T_RPT_JTBB_QSFZRB WHERE 1=1 ");     try {if (tRptJtbbQsfzrb.getFlagCpMc() == 1) {      if (StringUtil.isBlank(tRptJtbbQsfzrb.getCpMc())) {             sql.append(" and CP_MC is null ");          }      else{             sql.append(" and CP_MC=:cpMc");             sql.setString("cpMc", tRptJtbbQsfzrb.getCpMc());          }   } if (tRptJtbbQsfzrb.getFlagCreateDate() == 1) {      if (tRptJtbbQsfzrb.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", tRptJtbbQsfzrb.getCreateDate());          }   } if (tRptJtbbQsfzrb.getFlagFgs() == 1) {      if (StringUtil.isBlank(tRptJtbbQsfzrb.getFgs())) {             sql.append(" and FGS is null ");          }      else{             sql.append(" and FGS=:fgs");             sql.setLong("fgs", tRptJtbbQsfzrb.getFgs());          }   } if (tRptJtbbQsfzrb.getFlagOpenDate() == 1) {      if (tRptJtbbQsfzrb.getOpenDate() == null) {             sql.append(" and OPEN_DATE is null ");          }      else{             sql.append(" and OPEN_DATE=:openDate");             sql.setTimestamp("openDate", tRptJtbbQsfzrb.getOpenDate());          }   } if (tRptJtbbQsfzrb.getFlagQgs() == 1) {      if (StringUtil.isBlank(tRptJtbbQsfzrb.getQgs())) {             sql.append(" and QGS is null ");          }      else{             sql.append(" and QGS=:qgs");             sql.setLong("qgs", tRptJtbbQsfzrb.getQgs());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           tRptJtbbQsfzrb = new TRptJtbbQsfzrbSVO();           tRptJtbbQsfzrb.setCpMc(rs.getString("CP_MC"));           tRptJtbbQsfzrb.setCreateDate(rs.getTimestamp("CREATE_DATE"));           tRptJtbbQsfzrb.setFgs(rs.getString("FGS"));           tRptJtbbQsfzrb.setOpenDate(rs.getTimestamp("OPEN_DATE"));           tRptJtbbQsfzrb.setQgs(rs.getString("QGS"));               res.add(tRptJtbbQsfzrb);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       TRptJtbbQsfzrbSVO tRptJtbbQsfzrb=(TRptJtbbQsfzrbSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE T_RPT_JTBB_QSFZRB SET ");     try {if (tRptJtbbQsfzrb.getFlagCpMc() == 1) {sql.append("CP_MC=:cpMc,"); sql.setString("cpMc", tRptJtbbQsfzrb.getCpMc()); } if (tRptJtbbQsfzrb.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", tRptJtbbQsfzrb.getCreateDate()); } if (tRptJtbbQsfzrb.getFlagFgs() == 1) {sql.append("FGS=:fgs,");sql.setLong("fgs", tRptJtbbQsfzrb.getFgs()); } if (tRptJtbbQsfzrb.getFlagOpenDate() == 1) {sql.append("OPEN_DATE=:openDate,"); sql.setTimestamp("openDate", tRptJtbbQsfzrb.getOpenDate()); } if (tRptJtbbQsfzrb.getFlagQgs() == 1) {sql.append("QGS=:qgs,");sql.setLong("qgs", tRptJtbbQsfzrb.getQgs()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO T_RPT_JTBB_QSFZRB(CP_MC,CREATE_DATE,FGS,OPEN_DATE,QGS)");sql.append(" VALUES (:cpMc,:createDate,:fgs,:openDate,:qgs)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       TRptJtbbQsfzrbSVO tRptJtbbQsfzrb=(TRptJtbbQsfzrbSVO) list.get(i);         if (tRptJtbbQsfzrb== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }      if (StringUtil.isBlank(tRptJtbbQsfzrb.getCpMc())) {      sql.setNullString("cpMc");     } else {    sql.setString("cpMc", tRptJtbbQsfzrb.getCpMc());    }    if (tRptJtbbQsfzrb.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", tRptJtbbQsfzrb.getCreateDate());    }       if (StringUtil.isBlank(tRptJtbbQsfzrb.getFgs())) {      sql.setNullLong("fgs");     } else {    sql.setLong("fgs", tRptJtbbQsfzrb.getFgs());    }    if (tRptJtbbQsfzrb.getOpenDate() == null) {      sql.setNullDate("openDate");     } else {    sql.setTimestamp("openDate", tRptJtbbQsfzrb.getOpenDate());    }       if (StringUtil.isBlank(tRptJtbbQsfzrb.getQgs())) {      sql.setNullLong("qgs");     } else {    sql.setLong("qgs", tRptJtbbQsfzrb.getQgs());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     TRptJtbbQsfzrbSVO tRptJtbbQsfzrb=(TRptJtbbQsfzrbSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM T_RPT_JTBB_QSFZRB WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     TRptJtbbQsfzrbSVO tRptJtbbQsfzrb=(TRptJtbbQsfzrbSVO) vo;       }}
