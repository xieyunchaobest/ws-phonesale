package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.IFuncNodeTreeSDAO;import com.cattsoft.tm.vo.FuncNodeTreeSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法FuncNodeTreeSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class FuncNodeTreeSDAOImpl implements IFuncNodeTreeSDAO{    private static Logger log = Logger.getLogger(FuncNodeTreeSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     FuncNodeTreeSVO funcNodeTree=(FuncNodeTreeSVO) vo;    if (StringUtil.isBlank(funcNodeTree.getNodeTreeId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO FUNC_NODE_TREE(DESCRIPTION,FILE_NAME,HTML,NODE_TREE_CODE,NODE_TREE_ID,NODE_TREE_NAME,PARENT_NODE_TREE_ID)");sql.append(" VALUES (:description,:fileName,:html,:nodeTreeCode,:nodeTreeId,:nodeTreeName,:parentNodeTreeId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(funcNodeTree.getDescription())) {      sql.setNullString("description");     } else {    sql.setString("description", funcNodeTree.getDescription());    }       if (StringUtil.isBlank(funcNodeTree.getFileName())) {      sql.setNullString("fileName");     } else {    sql.setString("fileName", funcNodeTree.getFileName());    }       if (StringUtil.isBlank(funcNodeTree.getHtml())) {      sql.setNullString("html");     } else {    sql.setString("html", funcNodeTree.getHtml());    }       if (StringUtil.isBlank(funcNodeTree.getNodeTreeCode())) {      sql.setNullString("nodeTreeCode");     } else {    sql.setString("nodeTreeCode", funcNodeTree.getNodeTreeCode());    }       if (StringUtil.isBlank(funcNodeTree.getNodeTreeId())) {      sql.setNullLong("nodeTreeId");     } else {    sql.setLong("nodeTreeId", funcNodeTree.getNodeTreeId());    }       if (StringUtil.isBlank(funcNodeTree.getNodeTreeName())) {      sql.setNullString("nodeTreeName");     } else {    sql.setString("nodeTreeName", funcNodeTree.getNodeTreeName());    }       if (StringUtil.isBlank(funcNodeTree.getParentNodeTreeId())) {      sql.setNullLong("parentNodeTreeId");     } else {    sql.setLong("parentNodeTreeId", funcNodeTree.getParentNodeTreeId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     FuncNodeTreeSVO funcNodeTree=(FuncNodeTreeSVO) vo;    if (StringUtil.isBlank(funcNodeTree.getNodeTreeId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT DESCRIPTION,FILE_NAME,HTML,NODE_TREE_CODE,NODE_TREE_ID,NODE_TREE_NAME,PARENT_NODE_TREE_ID FROM FUNC_NODE_TREE WHERE 1=1  ");sql.append(" and NODE_TREE_ID=:nodeTreeId");sql.setLong("nodeTreeId", funcNodeTree.getNodeTreeId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      funcNodeTree =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           funcNodeTree = new FuncNodeTreeSVO();           funcNodeTree.setDescription(rs.getString("DESCRIPTION"));           funcNodeTree.setFileName(rs.getString("FILE_NAME"));           funcNodeTree.setHtml(rs.getString("HTML"));           funcNodeTree.setNodeTreeCode(rs.getString("NODE_TREE_CODE"));           funcNodeTree.setNodeTreeId(rs.getString("NODE_TREE_ID"));           funcNodeTree.setNodeTreeName(rs.getString("NODE_TREE_NAME"));           funcNodeTree.setParentNodeTreeId(rs.getString("PARENT_NODE_TREE_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return funcNodeTree;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       FuncNodeTreeSVO funcNodeTree=(FuncNodeTreeSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT DESCRIPTION,FILE_NAME,HTML,NODE_TREE_CODE,NODE_TREE_ID,NODE_TREE_NAME,PARENT_NODE_TREE_ID FROM FUNC_NODE_TREE WHERE 1=1 ");     try {if (funcNodeTree.getFlagDescription() == 1) {      if (StringUtil.isBlank(funcNodeTree.getDescription())) {             sql.append(" and DESCRIPTION is null ");          }      else{             sql.append(" and DESCRIPTION=:description");             sql.setString("description", funcNodeTree.getDescription());          }   } if (funcNodeTree.getFlagFileName() == 1) {      if (StringUtil.isBlank(funcNodeTree.getFileName())) {             sql.append(" and FILE_NAME is null ");          }      else{             sql.append(" and FILE_NAME=:fileName");             sql.setString("fileName", funcNodeTree.getFileName());          }   } if (funcNodeTree.getFlagHtml() == 1) {      if (StringUtil.isBlank(funcNodeTree.getHtml())) {             sql.append(" and HTML is null ");          }      else{             sql.append(" and HTML=:html");             sql.setString("html", funcNodeTree.getHtml());          }   } if (funcNodeTree.getFlagNodeTreeCode() == 1) {      if (StringUtil.isBlank(funcNodeTree.getNodeTreeCode())) {             sql.append(" and NODE_TREE_CODE is null ");          }      else{             sql.append(" and NODE_TREE_CODE=:nodeTreeCode");             sql.setString("nodeTreeCode", funcNodeTree.getNodeTreeCode());          }   } if (funcNodeTree.getFlagNodeTreeId() == 1) {      if (StringUtil.isBlank(funcNodeTree.getNodeTreeId())) {             sql.append(" and NODE_TREE_ID is null ");          }      else{             sql.append(" and NODE_TREE_ID=:nodeTreeId");             sql.setLong("nodeTreeId", funcNodeTree.getNodeTreeId());          }   } if (funcNodeTree.getFlagNodeTreeName() == 1) {      if (StringUtil.isBlank(funcNodeTree.getNodeTreeName())) {             sql.append(" and NODE_TREE_NAME is null ");          }      else{             sql.append(" and NODE_TREE_NAME=:nodeTreeName");             sql.setString("nodeTreeName", funcNodeTree.getNodeTreeName());          }   } if (funcNodeTree.getFlagParentNodeTreeId() == 1) {      if (StringUtil.isBlank(funcNodeTree.getParentNodeTreeId())) {             sql.append(" and PARENT_NODE_TREE_ID is null ");          }      else{             sql.append(" and PARENT_NODE_TREE_ID=:parentNodeTreeId");             sql.setLong("parentNodeTreeId", funcNodeTree.getParentNodeTreeId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           funcNodeTree = new FuncNodeTreeSVO();           funcNodeTree.setDescription(rs.getString("DESCRIPTION"));           funcNodeTree.setFileName(rs.getString("FILE_NAME"));           funcNodeTree.setHtml(rs.getString("HTML"));           funcNodeTree.setNodeTreeCode(rs.getString("NODE_TREE_CODE"));           funcNodeTree.setNodeTreeId(rs.getString("NODE_TREE_ID"));           funcNodeTree.setNodeTreeName(rs.getString("NODE_TREE_NAME"));           funcNodeTree.setParentNodeTreeId(rs.getString("PARENT_NODE_TREE_ID"));               res.add(funcNodeTree);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       FuncNodeTreeSVO funcNodeTree=(FuncNodeTreeSVO) vo;    if (StringUtil.isBlank(funcNodeTree.getNodeTreeId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE FUNC_NODE_TREE SET ");     try {if (funcNodeTree.getFlagDescription() == 1) {sql.append("DESCRIPTION=:description,"); sql.setString("description", funcNodeTree.getDescription()); } if (funcNodeTree.getFlagFileName() == 1) {sql.append("FILE_NAME=:fileName,"); sql.setString("fileName", funcNodeTree.getFileName()); } if (funcNodeTree.getFlagHtml() == 1) {sql.append("HTML=:html,"); sql.setString("html", funcNodeTree.getHtml()); } if (funcNodeTree.getFlagNodeTreeCode() == 1) {sql.append("NODE_TREE_CODE=:nodeTreeCode,"); sql.setString("nodeTreeCode", funcNodeTree.getNodeTreeCode()); } if (funcNodeTree.getFlagNodeTreeName() == 1) {sql.append("NODE_TREE_NAME=:nodeTreeName,"); sql.setString("nodeTreeName", funcNodeTree.getNodeTreeName()); } if (funcNodeTree.getFlagParentNodeTreeId() == 1) {sql.append("PARENT_NODE_TREE_ID=:parentNodeTreeId,");sql.setLong("parentNodeTreeId", funcNodeTree.getParentNodeTreeId()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and NODE_TREE_ID=:nodeTreeId");sql.setLong("nodeTreeId", funcNodeTree.getNodeTreeId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO FUNC_NODE_TREE(DESCRIPTION,FILE_NAME,HTML,NODE_TREE_CODE,NODE_TREE_ID,NODE_TREE_NAME,PARENT_NODE_TREE_ID)");sql.append(" VALUES (:description,:fileName,:html,:nodeTreeCode,:nodeTreeId,:nodeTreeName,:parentNodeTreeId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       FuncNodeTreeSVO funcNodeTree=(FuncNodeTreeSVO) list.get(i);         if (funcNodeTree== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(funcNodeTree.getNodeTreeId())) {       throw new AppException("100002", "缺少对象的主键！");      }      if (StringUtil.isBlank(funcNodeTree.getDescription())) {      sql.setNullString("description");     } else {    sql.setString("description", funcNodeTree.getDescription());    }       if (StringUtil.isBlank(funcNodeTree.getFileName())) {      sql.setNullString("fileName");     } else {    sql.setString("fileName", funcNodeTree.getFileName());    }       if (StringUtil.isBlank(funcNodeTree.getHtml())) {      sql.setNullString("html");     } else {    sql.setString("html", funcNodeTree.getHtml());    }       if (StringUtil.isBlank(funcNodeTree.getNodeTreeCode())) {      sql.setNullString("nodeTreeCode");     } else {    sql.setString("nodeTreeCode", funcNodeTree.getNodeTreeCode());    }       if (StringUtil.isBlank(funcNodeTree.getNodeTreeId())) {      sql.setNullLong("nodeTreeId");     } else {    sql.setLong("nodeTreeId", funcNodeTree.getNodeTreeId());    }       if (StringUtil.isBlank(funcNodeTree.getNodeTreeName())) {      sql.setNullString("nodeTreeName");     } else {    sql.setString("nodeTreeName", funcNodeTree.getNodeTreeName());    }       if (StringUtil.isBlank(funcNodeTree.getParentNodeTreeId())) {      sql.setNullLong("parentNodeTreeId");     } else {    sql.setLong("parentNodeTreeId", funcNodeTree.getParentNodeTreeId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     FuncNodeTreeSVO funcNodeTree=(FuncNodeTreeSVO) vo;    if (StringUtil.isBlank(funcNodeTree.getNodeTreeId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM FUNC_NODE_TREE WHERE 1=1  ");sql.append(" and NODE_TREE_ID=:nodeTreeId");sql.setLong("nodeTreeId", funcNodeTree.getNodeTreeId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     FuncNodeTreeSVO funcNodeTree=(FuncNodeTreeSVO) vo;       }}
