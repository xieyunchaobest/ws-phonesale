package com.cattsoft.tm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.tm.component.dao.ISysUserAllocSDAO;import com.cattsoft.tm.vo.SysUserAllocSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil; /**   * 方法SysUserAllocSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class SysUserAllocSDAOImpl implements ISysUserAllocSDAO{    private static Logger log = Logger.getLogger(SysUserAllocSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SysUserAllocSVO sysUserAlloc=(SysUserAllocSVO) vo;      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SYS_USER_ALLOC(ALLOC_AUTH,ALLOC_ID,CREATE_DATE,ENTRUST_FLAG,FUNC_NODE_ID,GRANT_SYS_USER_ID,LOCAL_NET_ID,RANGE_ID,STS,STS_DATE,SYS_ROLE_ID,SYS_USER_ID)");sql.append(" VALUES (:allocAuth,:allocId,:createDate,:entrustFlag,:funcNodeId,:grantSysUserId,:localNetId,:rangeId,:sts,:stsDate,:sysRoleId,:sysUserId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());      if (StringUtil.isBlank(sysUserAlloc.getAllocAuth())) {      sql.setNullString("allocAuth");     } else {    sql.setString("allocAuth", sysUserAlloc.getAllocAuth());    }       if (StringUtil.isBlank(sysUserAlloc.getAllocId())) {      sql.setNullLong("allocId");     } else {    sql.setLong("allocId", sysUserAlloc.getAllocId());    }    if (sysUserAlloc.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", sysUserAlloc.getCreateDate());    }       if (StringUtil.isBlank(sysUserAlloc.getEntrustFlag())) {      sql.setNullString("entrustFlag");     } else {    sql.setString("entrustFlag", sysUserAlloc.getEntrustFlag());    }       if (StringUtil.isBlank(sysUserAlloc.getFuncNodeId())) {      sql.setNullLong("funcNodeId");     } else {    sql.setLong("funcNodeId", sysUserAlloc.getFuncNodeId());    }       if (StringUtil.isBlank(sysUserAlloc.getGrantSysUserId())) {      sql.setNullString("grantSysUserId");     } else {    sql.setString("grantSysUserId", sysUserAlloc.getGrantSysUserId());    }       if (StringUtil.isBlank(sysUserAlloc.getLocalNetId())) {      sql.setNullString("localNetId");     } else {    sql.setString("localNetId", sysUserAlloc.getLocalNetId());    }       if (StringUtil.isBlank(sysUserAlloc.getRangeId())) {      sql.setNullLong("rangeId");     } else {    sql.setLong("rangeId", sysUserAlloc.getRangeId());    }       if (StringUtil.isBlank(sysUserAlloc.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", sysUserAlloc.getSts());    }    if (sysUserAlloc.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", sysUserAlloc.getStsDate());    }       if (StringUtil.isBlank(sysUserAlloc.getSysRoleId())) {      sql.setNullLong("sysRoleId");     } else {    sql.setLong("sysRoleId", sysUserAlloc.getSysRoleId());    }       if (StringUtil.isBlank(sysUserAlloc.getSysUserId())) {      sql.setNullString("sysUserId");     } else {    sql.setString("sysUserId", sysUserAlloc.getSysUserId());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SysUserAllocSVO sysUserAlloc=(SysUserAllocSVO) vo;       Sql sql = new Sql("SELECT ALLOC_AUTH,ALLOC_ID,CREATE_DATE,ENTRUST_FLAG,FUNC_NODE_ID,GRANT_SYS_USER_ID,LOCAL_NET_ID,RANGE_ID,STS,STS_DATE,SYS_ROLE_ID,SYS_USER_ID FROM SYS_USER_ALLOC WHERE 1=1  ");      Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      sysUserAlloc =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           sysUserAlloc = new SysUserAllocSVO();           sysUserAlloc.setAllocAuth(rs.getString("ALLOC_AUTH"));           sysUserAlloc.setAllocId(rs.getString("ALLOC_ID"));           sysUserAlloc.setCreateDate(rs.getTimestamp("CREATE_DATE"));           sysUserAlloc.setEntrustFlag(rs.getString("ENTRUST_FLAG"));           sysUserAlloc.setFuncNodeId(rs.getString("FUNC_NODE_ID"));           sysUserAlloc.setGrantSysUserId(rs.getString("GRANT_SYS_USER_ID"));           sysUserAlloc.setLocalNetId(rs.getString("LOCAL_NET_ID"));           sysUserAlloc.setRangeId(rs.getString("RANGE_ID"));           sysUserAlloc.setSts(rs.getString("STS"));           sysUserAlloc.setStsDate(rs.getTimestamp("STS_DATE"));           sysUserAlloc.setSysRoleId(rs.getString("SYS_ROLE_ID"));           sysUserAlloc.setSysUserId(rs.getString("SYS_USER_ID"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return sysUserAlloc;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SysUserAllocSVO sysUserAlloc=(SysUserAllocSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT ALLOC_AUTH,ALLOC_ID,CREATE_DATE,ENTRUST_FLAG,FUNC_NODE_ID,GRANT_SYS_USER_ID,LOCAL_NET_ID,RANGE_ID,STS,STS_DATE,SYS_ROLE_ID,SYS_USER_ID FROM SYS_USER_ALLOC WHERE 1=1 ");     try {if (sysUserAlloc.getFlagAllocAuth() == 1) {      if (StringUtil.isBlank(sysUserAlloc.getAllocAuth())) {             sql.append(" and ALLOC_AUTH is null ");          }      else{             sql.append(" and ALLOC_AUTH=:allocAuth");             sql.setString("allocAuth", sysUserAlloc.getAllocAuth());          }   } if (sysUserAlloc.getFlagAllocId() == 1) {      if (StringUtil.isBlank(sysUserAlloc.getAllocId())) {             sql.append(" and ALLOC_ID is null ");          }      else{             sql.append(" and ALLOC_ID=:allocId");             sql.setLong("allocId", sysUserAlloc.getAllocId());          }   } if (sysUserAlloc.getFlagCreateDate() == 1) {      if (sysUserAlloc.getCreateDate() == null) {             sql.append(" and CREATE_DATE is null ");          }      else{             sql.append(" and CREATE_DATE=:createDate");             sql.setTimestamp("createDate", sysUserAlloc.getCreateDate());          }   } if (sysUserAlloc.getFlagEntrustFlag() == 1) {      if (StringUtil.isBlank(sysUserAlloc.getEntrustFlag())) {             sql.append(" and ENTRUST_FLAG is null ");          }      else{             sql.append(" and ENTRUST_FLAG=:entrustFlag");             sql.setString("entrustFlag", sysUserAlloc.getEntrustFlag());          }   } if (sysUserAlloc.getFlagFuncNodeId() == 1) {      if (StringUtil.isBlank(sysUserAlloc.getFuncNodeId())) {             sql.append(" and FUNC_NODE_ID is null ");          }      else{             sql.append(" and FUNC_NODE_ID=:funcNodeId");             sql.setLong("funcNodeId", sysUserAlloc.getFuncNodeId());          }   } if (sysUserAlloc.getFlagGrantSysUserId() == 1) {      if (StringUtil.isBlank(sysUserAlloc.getGrantSysUserId())) {             sql.append(" and GRANT_SYS_USER_ID is null ");          }      else{             sql.append(" and GRANT_SYS_USER_ID=:grantSysUserId");             sql.setString("grantSysUserId", sysUserAlloc.getGrantSysUserId());          }   } if (sysUserAlloc.getFlagLocalNetId() == 1) {      if (StringUtil.isBlank(sysUserAlloc.getLocalNetId())) {             sql.append(" and LOCAL_NET_ID is null ");          }      else{             sql.append(" and LOCAL_NET_ID=:localNetId");             sql.setString("localNetId", sysUserAlloc.getLocalNetId());          }   } if (sysUserAlloc.getFlagRangeId() == 1) {      if (StringUtil.isBlank(sysUserAlloc.getRangeId())) {             sql.append(" and RANGE_ID is null ");          }      else{             sql.append(" and RANGE_ID=:rangeId");             sql.setLong("rangeId", sysUserAlloc.getRangeId());          }   } if (sysUserAlloc.getFlagSts() == 1) {      if (StringUtil.isBlank(sysUserAlloc.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", sysUserAlloc.getSts());          }   } if (sysUserAlloc.getFlagStsDate() == 1) {      if (sysUserAlloc.getStsDate() == null) {             sql.append(" and STS_DATE is null ");          }      else{             sql.append(" and STS_DATE=:stsDate");             sql.setTimestamp("stsDate", sysUserAlloc.getStsDate());          }   } if (sysUserAlloc.getFlagSysRoleId() == 1) {      if (StringUtil.isBlank(sysUserAlloc.getSysRoleId())) {             sql.append(" and SYS_ROLE_ID is null ");          }      else{             sql.append(" and SYS_ROLE_ID=:sysRoleId");             sql.setLong("sysRoleId", sysUserAlloc.getSysRoleId());          }   } if (sysUserAlloc.getFlagSysUserId() == 1) {      if (StringUtil.isBlank(sysUserAlloc.getSysUserId())) {             sql.append(" and SYS_USER_ID is null ");          }      else{             sql.append(" and SYS_USER_ID=:sysUserId");             sql.setString("sysUserId", sysUserAlloc.getSysUserId());          }   }            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           sysUserAlloc = new SysUserAllocSVO();           sysUserAlloc.setAllocAuth(rs.getString("ALLOC_AUTH"));           sysUserAlloc.setAllocId(rs.getString("ALLOC_ID"));           sysUserAlloc.setCreateDate(rs.getTimestamp("CREATE_DATE"));           sysUserAlloc.setEntrustFlag(rs.getString("ENTRUST_FLAG"));           sysUserAlloc.setFuncNodeId(rs.getString("FUNC_NODE_ID"));           sysUserAlloc.setGrantSysUserId(rs.getString("GRANT_SYS_USER_ID"));           sysUserAlloc.setLocalNetId(rs.getString("LOCAL_NET_ID"));           sysUserAlloc.setRangeId(rs.getString("RANGE_ID"));           sysUserAlloc.setSts(rs.getString("STS"));           sysUserAlloc.setStsDate(rs.getTimestamp("STS_DATE"));           sysUserAlloc.setSysRoleId(rs.getString("SYS_ROLE_ID"));           sysUserAlloc.setSysUserId(rs.getString("SYS_USER_ID"));               res.add(sysUserAlloc);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       SysUserAllocSVO sysUserAlloc=(SysUserAllocSVO) vo;          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE SYS_USER_ALLOC SET ");     try {if (sysUserAlloc.getFlagAllocAuth() == 1) {sql.append("ALLOC_AUTH=:allocAuth,"); sql.setString("allocAuth", sysUserAlloc.getAllocAuth()); } if (sysUserAlloc.getFlagAllocId() == 1) {sql.append("ALLOC_ID=:allocId,");sql.setLong("allocId", sysUserAlloc.getAllocId()); } if (sysUserAlloc.getFlagCreateDate() == 1) {sql.append("CREATE_DATE=:createDate,"); sql.setTimestamp("createDate", sysUserAlloc.getCreateDate()); } if (sysUserAlloc.getFlagEntrustFlag() == 1) {sql.append("ENTRUST_FLAG=:entrustFlag,"); sql.setString("entrustFlag", sysUserAlloc.getEntrustFlag()); } if (sysUserAlloc.getFlagFuncNodeId() == 1) {sql.append("FUNC_NODE_ID=:funcNodeId,");sql.setLong("funcNodeId", sysUserAlloc.getFuncNodeId()); } if (sysUserAlloc.getFlagGrantSysUserId() == 1) {sql.append("GRANT_SYS_USER_ID=:grantSysUserId,"); sql.setString("grantSysUserId", sysUserAlloc.getGrantSysUserId()); } if (sysUserAlloc.getFlagLocalNetId() == 1) {sql.append("LOCAL_NET_ID=:localNetId,"); sql.setString("localNetId", sysUserAlloc.getLocalNetId()); } if (sysUserAlloc.getFlagRangeId() == 1) {sql.append("RANGE_ID=:rangeId,");sql.setLong("rangeId", sysUserAlloc.getRangeId()); } if (sysUserAlloc.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", sysUserAlloc.getSts()); } if (sysUserAlloc.getFlagStsDate() == 1) {sql.append("STS_DATE=:stsDate,"); sql.setTimestamp("stsDate", sysUserAlloc.getStsDate()); } if (sysUserAlloc.getFlagSysRoleId() == 1) {sql.append("SYS_ROLE_ID=:sysRoleId,");sql.setLong("sysRoleId", sysUserAlloc.getSysRoleId()); } if (sysUserAlloc.getFlagSysUserId() == 1) {sql.append("SYS_USER_ID=:sysUserId,"); sql.setString("sysUserId", sysUserAlloc.getSysUserId()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO SYS_USER_ALLOC(ALLOC_AUTH,ALLOC_ID,CREATE_DATE,ENTRUST_FLAG,FUNC_NODE_ID,GRANT_SYS_USER_ID,LOCAL_NET_ID,RANGE_ID,STS,STS_DATE,SYS_ROLE_ID,SYS_USER_ID)");sql.append(" VALUES (:allocAuth,:allocId,:createDate,:entrustFlag,:funcNodeId,:grantSysUserId,:localNetId,:rangeId,:sts,:stsDate,:sysRoleId,:sysUserId)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       SysUserAllocSVO sysUserAlloc=(SysUserAllocSVO) list.get(i);         if (sysUserAlloc== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }      if (StringUtil.isBlank(sysUserAlloc.getAllocAuth())) {      sql.setNullString("allocAuth");     } else {    sql.setString("allocAuth", sysUserAlloc.getAllocAuth());    }       if (StringUtil.isBlank(sysUserAlloc.getAllocId())) {      sql.setNullLong("allocId");     } else {    sql.setLong("allocId", sysUserAlloc.getAllocId());    }    if (sysUserAlloc.getCreateDate() == null) {      sql.setNullDate("createDate");     } else {    sql.setTimestamp("createDate", sysUserAlloc.getCreateDate());    }       if (StringUtil.isBlank(sysUserAlloc.getEntrustFlag())) {      sql.setNullString("entrustFlag");     } else {    sql.setString("entrustFlag", sysUserAlloc.getEntrustFlag());    }       if (StringUtil.isBlank(sysUserAlloc.getFuncNodeId())) {      sql.setNullLong("funcNodeId");     } else {    sql.setLong("funcNodeId", sysUserAlloc.getFuncNodeId());    }       if (StringUtil.isBlank(sysUserAlloc.getGrantSysUserId())) {      sql.setNullString("grantSysUserId");     } else {    sql.setString("grantSysUserId", sysUserAlloc.getGrantSysUserId());    }       if (StringUtil.isBlank(sysUserAlloc.getLocalNetId())) {      sql.setNullString("localNetId");     } else {    sql.setString("localNetId", sysUserAlloc.getLocalNetId());    }       if (StringUtil.isBlank(sysUserAlloc.getRangeId())) {      sql.setNullLong("rangeId");     } else {    sql.setLong("rangeId", sysUserAlloc.getRangeId());    }       if (StringUtil.isBlank(sysUserAlloc.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", sysUserAlloc.getSts());    }    if (sysUserAlloc.getStsDate() == null) {      sql.setNullDate("stsDate");     } else {    sql.setTimestamp("stsDate", sysUserAlloc.getStsDate());    }       if (StringUtil.isBlank(sysUserAlloc.getSysRoleId())) {      sql.setNullLong("sysRoleId");     } else {    sql.setLong("sysRoleId", sysUserAlloc.getSysRoleId());    }       if (StringUtil.isBlank(sysUserAlloc.getSysUserId())) {      sql.setNullString("sysUserId");     } else {    sql.setString("sysUserId", sysUserAlloc.getSysUserId());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     SysUserAllocSVO sysUserAlloc=(SysUserAllocSVO) vo;          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM SYS_USER_ALLOC WHERE 1=1  ");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     SysUserAllocSVO sysUserAlloc=(SysUserAllocSVO) vo;       }}
