/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cattsoft.tm.struts;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import sun.misc.BASE64Decoder;

import com.cattsoft.pub.SysConstants;
import com.cattsoft.pub.exception.AppException;
import com.cattsoft.pub.exception.SysException;
import com.cattsoft.pub.util.DateUtil;
import com.cattsoft.pub.util.StringUtil;
import com.cattsoft.sp.delegate.SoManagerDelegate;
import com.cattsoft.tm.delegate.WoSurveyDelegate;
import com.cattsoft.tm.vo.WoItemSVO;
import com.cattsoft.webpub.util.OptionUtil;
import com.cattsoft.webpub.util.ReqUtil;

/**
 * 
 * Title: 服务开通系统<br>
 * Description:外勘处理Action <br>
 * Date: 2007-6-13 <br>
 * Copyright (c) 2007 CATTSoft<br>
 * 
 * @author wangyun
 */
public class WoSurveyAction extends DispatchAction {

	private static final Logger log = Logger.getLogger(WoSurveyAction.class);

	
	
	/**
	 * 外勘处理回填 <br>
	 * 
	 * @data 2007-5-21
	 * @exception SysException,AppException
	 *                remarks:外勘信息回填,目前只支持单个进行回填
	 * @throws IOException 
	 */

	public ActionForward feedbackWo4MOS(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws AppException, SysException, IOException {

		JSONObject woInfo ;
		String soNbrStr = "";
		String remarkStr = "";
		List woList = new ArrayList();
		JSONArray woInfoList = null;
		
		JSONObject requestJsonObject=JSONObject.fromObject(ReqUtil.getRequestStr(request));

		String woNbrs = requestJsonObject.getString("woNbrValue");
		
		
		if (!StringUtil.isBlank(woNbrs)) {
			String tempWoNbr = woNbrs;
			JSONObject woJSON = new JSONObject();
			woJSON.put("woNbr", tempWoNbr);
			woList.add(woJSON);
			log.debug("woNbr:" + tempWoNbr);
			
			JSONObject paraJSON =  new JSONObject();
			paraJSON.put("woArray", woList);

			String resultMapStr = WoSurveyDelegate.getDelegate().findWoBat4MOS(paraJSON.toString());
//				WoHandleDelegate.getDelegate().svcCallIOMByMosNative(SysConstants.FUNCODE_FIND_WO_BAT, null, paraJSON.toString());
//			woInfoList = WoSurveyDelegate.getDelegate().findWoBat(woList);
			
			JSONObject resultMapJSON = JSONObject.fromObject(resultMapStr);
			woInfoList = resultMapJSON.getJSONArray("woInfoList");
			
			if(woInfoList != null && woInfoList.size()>0){

				// 理论上一条工单只能对应一个so
				for (int i = 0; i < woInfoList.size(); i++) {
					woInfo = (JSONObject) woInfoList.get(i);
					soNbrStr = soNbrStr + woInfo.getString("soNbr") + ",";
				}
				soNbrStr = soNbrStr.substring(0, soNbrStr.length() - 1);
				// 对于批量不显示其备注信息,对于单个出来显示对应的remark信息,以便做修改
				remarkStr = ((JSONObject) woInfoList.get(woInfoList.size() - 1))
						.getString("remarks");
			}


		} else {
			log.debug("没有获取woNbr!");
		}

		Map resultMap = new HashMap();
		
		List surveyResultList = OptionUtil.getSurveyResultlvBean();
		if(woInfoList.size() == 1 && !StringUtil.isBlank(remarkStr)){
			resultMap.put("remarks",remarkStr);
		}
		

		resultMap.put("surveyResultList", surveyResultList);
		

		
//		response.setContentType("text/json;charset=utf-8");  
//		response.setCharacterEncoding("UTF-8");  
		Map map = new HashMap();
		Map detailMap = new HashMap();
		map.put("surveyInfo", resultMap);
		JSONObject json = JSONObject.fromObject(map);
		ReqUtil.write(response, json.toString());
		return null;
		
	}
	
	
	private class Broken {
		private String id;
		private String namme;
	}

	
	public ActionForward login(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws AppException, SysException, IOException {
		String reqStr=this.getJSON(request);
		com.alibaba.fastjson.JSONObject j=com.alibaba.fastjson.JSONObject.parseObject(reqStr);
		String userName=j.getString("userName");
		String passWord=j.getString("password");
		
		System.out.println("reqStrreqStr="+reqStr);
		Map map=new HashMap();
		map.put("flag", "1");
		map.put("desc", "用户名密码错误！");
		
		//问题分类
		Map fenleiMap=new HashMap();
		fenleiMap.put("value", "1");
		fenleiMap.put("name", "分类1");
		Map fenleiMap2=new HashMap();
		fenleiMap2.put("value", "2");
		fenleiMap2.put("name", "分类2");
		Map fenleiMap3=new HashMap();
		fenleiMap3.put("value", "1");
		fenleiMap3.put("name", "分类1");
		Map fenleiMap4=new HashMap();
		fenleiMap4.put("value", "2");
		fenleiMap4.put("name", "分类2");
		Map fenleiMap5=new HashMap();
		fenleiMap5.put("value", "1");
		fenleiMap5.put("name", "分类1");
		Map fenleiMap6=new HashMap();
		fenleiMap6.put("value", "2");
		fenleiMap6.put("name", "分类2");
		Map fenleiMap7=new HashMap();
		fenleiMap7.put("value", "1");
		fenleiMap7.put("name", "分类1");
		Map fenleiMap8=new HashMap();
		fenleiMap8.put("value", "2");
		fenleiMap8.put("name", "分类2");
		Map fenleiMap9=new HashMap();
		fenleiMap9.put("value", "1");
		fenleiMap9.put("name", "分类1");
		Map fenleiMap10=new HashMap();
		fenleiMap10.put("value", "2");
		fenleiMap10.put("name", "分类2");
		List fenleiList=new ArrayList();
		fenleiList.add(fenleiMap);
		fenleiList.add(fenleiMap2); 
		fenleiList.add(fenleiMap3);
		fenleiList.add(fenleiMap4); 
		fenleiList.add(fenleiMap5);
		fenleiList.add(fenleiMap6); 
		fenleiList.add(fenleiMap7);
		fenleiList.add(fenleiMap8); 
		fenleiList.add(fenleiMap9);
		fenleiList.add(fenleiMap10);  
		
		Map subsectionlistMap=new HashMap();
		subsectionlistMap.put("value", "1");
		subsectionlistMap.put("name", "分类1");
		Map subsectionlistMap2=new HashMap();
		subsectionlistMap2.put("value", "2");
		subsectionlistMap2.put("name", "分类2");
		List fenleiList2=new ArrayList();
		fenleiList2.add(subsectionlistMap);
		fenleiList2.add(subsectionlistMap2); 
		
		Map zerenren1_1=new HashMap();
		zerenren1_1.put("value", "1");
		zerenren1_1.put("name", "1111");
		Map zerenren1_2=new HashMap();
		zerenren1_2.put("value", "2");
		zerenren1_2.put("name", "2222");
		List zerenrenList=new ArrayList();
		zerenrenList.add(zerenren1_1);
		zerenrenList.add(zerenren1_2);
		
		
		
		
		Map mm1=new HashMap();
		mm1.put("value", "1");
		mm1.put("name", "分类1");
		Map mm2=new HashMap();
		mm2.put("value", "2");
		mm2.put("name", "分类2");
		List mmlist=new ArrayList();
		mmlist.add(mm1);
		mmlist.add(mm2); 
		
		Map mmm1=new HashMap();
		mmm1.put("value", "1");
		mmm1.put("name", "分类1");
		Map mmm2=new HashMap();
		mmm2.put("value", "2");
		mmm2.put("name", "分类2");
		List mmmlist=new ArrayList();
		mmmlist.add(mmm1);
		mmmlist.add(mmm2); 
		
		
		Map mmmm1=new HashMap();
		mmmm1.put("value", "1");
		mmmm1.put("name", "分类1");
		Map mmmm2=new HashMap();
		mmmm2.put("value", "2");
		mmmm2.put("name", "分类2");
		List mmmmlist=new ArrayList();
		mmmmlist.add(mmmm1);
		mmmmlist.add(mmmm2); 
		
		Map qxhcCache=new HashMap();
		qxhcCache.put("problemClasslist", mmlist);
		qxhcCache.put("subsectionlist", fenleiList2);
		qxhcCache.put("subitemlist", mmmmlist);
		qxhcCache.put("spResultlist", mmmlist);
		qxhcCache.put("isOpenlist", fenleiList);
		qxhcCache.put("dutyPerson1", zerenrenList);
		
		Map m1=new HashMap();
		m1.put("cacheInfo", qxhcCache);
		
		
		Map nn1=new HashMap();
		nn1.put("value", "1");
		nn1.put("name", "分类1");
		Map nn2=new HashMap();
		nn2.put("value", "2");
		nn2.put("name", "分类2");
		List nnlist=new ArrayList();
		nnlist.add(nn1);
		nnlist.add(nn2); 
		
		Map nn3=new HashMap();
		nn3.put("value", "1");
		nn3.put("name", "分类1");
		Map nn4=new HashMap();
		nn4.put("value", "2");
		nn4.put("name", "分类2");
		List nn4list=new ArrayList();
		nn4list.add(nn3);
		nn4list.add(nn4); 
		
		
		Map nn5=new HashMap();
		nn5.put("value", "1");
		nn5.put("name", "分类1");
		Map nn6=new HashMap();
		nn6.put("value", "2");
		nn6.put("name", "分类2");
		List listnn6=new ArrayList();
		listnn6.add(nn5);
		listnn6.add(nn6); 
		
		Map nn7=new HashMap();
		nn7.put("value", "1");
		nn7.put("name", "分类1");
		Map nn8=new HashMap();
		nn8.put("value", "2");
		nn8.put("name", "分类2");
		List listnn8=new ArrayList();
		listnn8.add(nn7);
		listnn8.add(nn8); 
		
		Map nn9=new HashMap();
		nn9.put("value", "1");
		nn9.put("name", "分类1");
		Map nn0=new HashMap();
		nn0.put("value", "2");
		nn6.put("name", "分类2");
		List listnn0=new ArrayList();
		listnn0.add(nn9);
		listnn0.add(nn0); 
		
		
		
		
		Map sbCache=new HashMap();
		sbCache.put("useDepartmentlist", nnlist);
		sbCache.put("quantityUnitlist", nn4list);
		sbCache.put("belonglist", listnn6);
		sbCache.put("dutyTeamlist", listnn8);
		sbCache.put("equipTypelist", listnn0);
		
		
		Map m2=new HashMap();
		m2.put("cacheInfo", sbCache);
		 
		map.put("defmap", m1);
		map.put("eqpmap", m2); 
		map.put("defectIsCanInput", "0"); 
		
		Map funcMap=new HashMap();
		
		
		List funcList=new ArrayList();
		Map funcMap1=new HashMap();
		funcMap1.put("name", "缺陷管理");
		Map funcMap2=new HashMap();
		funcMap2.put("name", "设备台账");
		funcList.add(funcMap1);
		funcList.add(funcMap2);
		
		map.put("func", funcList);
		
		String json=com.alibaba.fastjson.JSONObject.toJSONString(map);
		this.write(response, json);
		return null;
	}
	
	public ActionForward serverTest(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws AppException, SysException, IOException {
		String res="1";
		this.write(response, res);
		return null;
	}
	
	public ActionForward getDefaultValue(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws AppException, SysException, IOException {
		Map m=new HashMap();
		m.put("flag", "1");
		m.put("number", "1212121212");
		String res=com.alibaba.fastjson.JSONObject.toJSONString(m);
		this.write(response, res);
		return null;
		
	}
	
	public ActionForward saveDefect(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws AppException, SysException, IOException {
		String req=this.getJSON(request);
		com.alibaba.fastjson.JSONObject j=com.alibaba.fastjson.JSONObject.parseObject(req);
		com.alibaba.fastjson.JSONArray jay=j.getJSONArray("imageList");
		if(jay!=null && jay.size()>0) {
			for(int i=0;i<jay.size();i++) {
				String s=(String)jay.get(i);
				System.out.println("sssssssssssss="+s);
				try {
					generateImage(s,"/Users/xieyunchao/iiiiiiiii"+i+".jpg");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			//	byte [] b=jb.getBytes("image"); 
				
				//FileOutputStream fout = new FileOutputStream("c:/jj.jpg");
		        //将字节写入文件
		     //   fout.write(b);
		       // fout.close();
		 
//		        System.out.println("Hello World!");
				
			}
			
		}
		Map map=new HashMap();
		map.put("flag", "1");
		map.put("desc", "失败");
		String json=com.alibaba.fastjson.JSONObject.toJSONString(map);
		this.write(response, json);
		return null;
		
	}
	
	
	 /**
     * add by xieyunchao 20130603，在Action中有时不需要跳转界面而只是输出字符串（常用于ajax请求或移动应用客户端)，此方法仅为避免出现大量重复性代码而封装
     * @param response 
     * @param str
     */
	public static void write(HttpServletResponse response, String str) {
		try {
			if(!StringUtil.isBlank(str)){
				byte[] jsonBytes=str.getBytes(); 
					// 下面一行代码试验：有和没有都行
					response.setCharacterEncoding("GBK");
					response.setContentLength(jsonBytes.length);
					response.getOutputStream().write(jsonBytes);
					response.getOutputStream().flush();
					response.getOutputStream().close();
	
			}else{
				response.setCharacterEncoding("GBK");
				response.setContentLength(0);
				response.getOutputStream().write("".getBytes());
				response.getOutputStream().flush();
				response.getOutputStream().close();
			}
		}   catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public  boolean generateImage(String imgStr,String imgFile)throws Exception {// 对字节数组字符串进行Base64解码并生成图片
		if (imgStr == null) // 图像数据为空
		return false;
		BASE64Decoder decoder = new BASE64Decoder();
		try {
		// Base64解码
		byte[] b = decoder.decodeBuffer(imgStr);
		for (int i = 0; i < b.length; ++i) {
		if (b[i] < 0) {// 调整异常数据
		b[i] += 256;
		}
		}
		// 生成jpeg图片
		String imgFilePath = imgFile;// 新生成的图片
		OutputStream out = new FileOutputStream(imgFilePath);
		out.write(b);
		out.flush();
		out.close();
		return true;
		} catch (Exception e) {
		throw e;
		}
		}
    
	
	
	/**
	 * 外勘处理信息回填更新数据<br>
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws AppException
	 * @throws SysException
	 * @throws IOException 
	 */

	public ActionForward updateFeedbackWo4MOS(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws AppException, SysException, IOException {
//		WoSurveyForm woSurveyForm = (WoSurveyForm) form;
//		PagInfo pagInfo = PagUtil.getPagInfo(request,
//				SysConstants.DEFAULT_PAGE_SIZE);
//		AdvQueryMVO queryVo = new AdvQueryMVO();
		
		String reqStr = ReqUtil.getRequestStr(request);
		JSONObject paraMapJSON = JSONObject.fromObject(reqStr);

		/*
		 * 获取页面信息 if
		 * ("".equals(woSurveyForm.getSimpleQueryVo().getStartRunStsDateStr()) ||
		 * "".equals(woSurveyForm.getSimpleQueryVo().getEndRunStsDateStr())) {
		 * this.setDefaultDate(woSurveyForm); }
		 * 
		 * queryVo.setChbStsDate(woSurveyForm.getSimpleQueryVo().getChbStsDate());
		 * 
		 * queryVo.setStsDateStart(woSurveyForm.getSimpleQueryVo().getStartRunStsDate());
		 * queryVo.setStsDateEnd(woSurveyForm.getSimpleQueryVo().getEndRunStsDate()); //
		 * 获取登陆信息 // 默认显示本人所在本地网 String localNetId =
		 * ReqUtil.getLocalNetId(request).toString(); // 默认服务区 String areaId =
		 * ReqUtil.getAreaId(request).toString(); // 默认工区
		 * 
		 * 
		 * String workAreaId = ReqUtil.getWorkAreaId(request).toString();
		 */
		List inspList = new ArrayList();
		String returnString = "";
//		String woNbrString = woSurveyForm.getWoNbrValue();
		String woNbrString = paraMapJSON.getString("woNbr");
		String staffId = paraMapJSON.getString("staffId");
		if(paraMapJSON.has("remarks")){
			returnString = paraMapJSON.getString("remarks");
		}
		String inspResultSts = paraMapJSON.getString("surveyResultId");

		if (!StringUtil.isBlank(woNbrString) ) {
			String tempWoNbr = woNbrString;
			WoItemSVO inspVo = new WoItemSVO();
			inspVo.setWoNbr(tempWoNbr);
			if (!"".equals(returnString)) {
				inspVo.setWoResult(returnString);
			}
			inspVo.setSts(inspResultSts);
			inspVo.setStsDate(DateUtil.getDBDate());
			inspVo.setWoItemCat(SysConstants.WO_ITEM_CAT_Y);
			inspList.add(inspVo);

			log.debug("woNbr:" + tempWoNbr);
		} 
		/*
		 * if (woNbrString.indexOf(",") != -1) { while (woNbrString.indexOf(",") !=
		 * -1) { int index = woNbrString.indexOf(","); String tempWoNbr =
		 * woNbrString.substring(0, index); WoSVO tempwoVo = new WoSVO();
		 * tempwoVo.setWoNbr(tempWoNbr); if (!"".equals(returnString)) {
		 * tempwoVo.setRemarks(returnString); } woList.add(tempwoVo);
		 * 
		 * log.debug("woNbr:" + tempWoNbr); woNbrString =
		 * woNbrString.substring(index + 1); } } else { WoSVO woVo = new
		 * WoSVO(); woVo.setWoNbr((String) request.getParameter("wonbrString"));
		 * if (!"".equals(returnString)) { woVo.setRemarks((String)
		 * request.getParameter("remarkString")); } woList.add(woVo); }
		 */
		// queryVo.setLocalNetId(localNetId);
		// queryVo.setAreaId(areaId);
//		String workAreaId = paraMapJSON.getString("workAreaId");
//		queryVo.setChbWorkAreaId("1");
//		queryVo.setWorkAreaId(workAreaId);
//		queryVo.setPageFlag("WoSurvey");
//		SimpleQueryMVO simVo = woSurveyForm.getSimpleQueryVo();
//		queryVo.setChbSoNbr(simVo.getChbSoNbr());
//		queryVo.setSoNbr(simVo.getSoNbr());
//		queryVo.setChbAccNbr(simVo.getChbAccNbr());
//		queryVo.setAccNbr(simVo.getAccNbr());
		// 设置工单状态
		// queryVo.setChbWoType(SysConstants.YES);
		// queryVo.setWoType(SysConstants.WO_TYPE_FOR_SURVEY);

		// 获取当前用户信息
		JSONObject paramMapJSON = new JSONObject();
		paramMapJSON.put("staffId", staffId);
		paramMapJSON.put("inspList", inspList);
		
		String resultStr = SoManagerDelegate.getDelegate().feedbackWo4MOS(paramMapJSON.toString());
			//WoHandleDelegate.getDelegate().svcCallIOMByMosNative(SysConstants.FUNCODE_MOD_FEEDBACK_WO, null, paramMapJSON.toString());
		
		JSONObject resultMapJSON = JSONObject.fromObject(resultStr);

//		response.setContentType("text/json;charset=utf-8");  
//		response.setCharacterEncoding("UTF-8");  
		Map map = new HashMap();
		JSONObject json = JSONObject.fromObject(map);
		PrintWriter writer = null;
		ReqUtil.write(response, resultMapJSON.toString());

		return null;
		
	}
	
	public static void main(String args[]) {
		Map m=new HashMap();
		m.put("a", "a");
		String a=(String)m.get("a");
		m.remove("a");
		System.out.println(a);
		
		String s=DateUtil.date2Str(new java.util.Date());
		System.out.println(s);
		
	}

	
	
	/**
	 * 获得从客户端传入的json字符串
	 * @param request
	 * @return
	 * @throws IOException
	 */
	private String getJSON(HttpServletRequest request) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(
				(ServletInputStream) request.getInputStream(), "UTF-8"));
		StringBuffer sb = new StringBuffer("");
		String temp;
		while ((temp = br.readLine()) != null) {
			sb.append(temp);
		}
		br.close();
		return sb.toString();
	}

}