package com.cattsoft.sm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import org.apache.log4j.Logger;import com.cattsoft.pub.SysConstants;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.CollectionFactory;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.sm.component.dao.IWorkAreaPrptySDAO;import com.cattsoft.sm.vo.WorkAreaPrptyMVO;import com.cattsoft.sm.vo.WorkAreaPrptySVO;/** * 方法WorkAreaPrptySDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class WorkAreaPrptySDAOImpl implements IWorkAreaPrptySDAO {	private static Logger log = Logger.getLogger(WorkAreaPrptySDAOImpl.class);	private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WorkAreaPrptySVO workAreaPrpty = (WorkAreaPrptySVO) vo;		if (StringUtil.isBlank(workAreaPrpty.getWorkAreaPrptyId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO WORK_AREA_PRPTY(ACTION_ID,AREA_ID,EXCH_ID,LOCAL_NET_ID,MATCH_VALUE,PRIORITY,PROD_ID,PRPTY_ID,PRPTY_TYPE,REMARKS,RULE_ID,STS,STS_DATE,WORK_AREA_ID,WORK_AREA_PRPTY_ID,WORK_TYPE_ID)");		sql				.append(" VALUES (:actionId,:areaId,:exchId,:localNetId,:matchValue,:priority,:prodId,:prptyId,:prptyType,:remarks,:ruleId,:sts,:stsDate,:workAreaId,:workAreaPrptyId,:workTypeId)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(workAreaPrpty.getActionId())) {				sql.setNullLong("actionId");			} else {				sql.setLong("actionId", workAreaPrpty.getActionId());			}			if (StringUtil.isBlank(workAreaPrpty.getAreaId())) {				sql.setNullLong("areaId");			} else {				sql.setLong("areaId", workAreaPrpty.getAreaId());			}			if (StringUtil.isBlank(workAreaPrpty.getExchId())) {				sql.setNullLong("exchId");			} else {				sql.setLong("exchId", workAreaPrpty.getExchId());			}			if (StringUtil.isBlank(workAreaPrpty.getLocalNetId())) {				sql.setNullLong("localNetId");			} else {				sql.setLong("localNetId", workAreaPrpty.getLocalNetId());			}			if (StringUtil.isBlank(workAreaPrpty.getMatchValue())) {				sql.setNullString("matchValue");			} else {				sql.setString("matchValue", workAreaPrpty.getMatchValue());			}			if (StringUtil.isBlank(workAreaPrpty.getPriority())) {				sql.setNullLong("priority");			} else {				sql.setLong("priority", workAreaPrpty.getPriority());			}			if (StringUtil.isBlank(workAreaPrpty.getProdId())) {				sql.setNullString("prodId");			} else {				sql.setString("prodId", workAreaPrpty.getProdId());			}			if (StringUtil.isBlank(workAreaPrpty.getPrptyId())) {				sql.setNullLong("prptyId");			} else {				sql.setLong("prptyId", workAreaPrpty.getPrptyId());			}			if (StringUtil.isBlank(workAreaPrpty.getPrptyType())) {				sql.setNullString("prptyType");			} else {				sql.setString("prptyType", workAreaPrpty.getPrptyType());			}			if (StringUtil.isBlank(workAreaPrpty.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", workAreaPrpty.getRemarks());			}			if (StringUtil.isBlank(workAreaPrpty.getRuleId())) {				sql.setNullString("ruleId");			} else {				sql.setString("ruleId", workAreaPrpty.getRuleId());			}			if (StringUtil.isBlank(workAreaPrpty.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", workAreaPrpty.getSts());			}			if (workAreaPrpty.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", workAreaPrpty.getStsDate());			}			if (StringUtil.isBlank(workAreaPrpty.getWorkAreaId())) {				sql.setNullLong("workAreaId");			} else {				sql.setLong("workAreaId", workAreaPrpty.getWorkAreaId());			}			if (StringUtil.isBlank(workAreaPrpty.getWorkAreaPrptyId())) {				sql.setNullLong("workAreaPrptyId");			} else {				sql.setLong("workAreaPrptyId", workAreaPrpty.getWorkAreaPrptyId());			}			if (StringUtil.isBlank(workAreaPrpty.getWorkTypeId())) {				sql.setNullLong("workTypeId");			} else {				sql.setLong("workTypeId", workAreaPrpty.getWorkTypeId());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WorkAreaPrptySVO workAreaPrpty = (WorkAreaPrptySVO) vo;		if (StringUtil.isBlank(workAreaPrpty.getWorkAreaPrptyId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT ACTION_ID,AREA_ID,EXCH_ID,LOCAL_NET_ID,MATCH_VALUE,PRIORITY,PROD_ID,PRPTY_ID,PRPTY_TYPE,REMARKS,RULE_ID,STS,STS_DATE,WORK_AREA_ID,WORK_AREA_PRPTY_ID,WORK_TYPE_ID FROM WORK_AREA_PRPTY WHERE 1=1  ");		sql.append(" and WORK_AREA_PRPTY_ID=:workAreaPrptyId");		sql.setLong("workAreaPrptyId", workAreaPrpty.getWorkAreaPrptyId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		workAreaPrpty = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				workAreaPrpty = new WorkAreaPrptySVO();				workAreaPrpty.setActionId(rs.getString("ACTION_ID"));				workAreaPrpty.setAreaId(rs.getString("AREA_ID"));				workAreaPrpty.setExchId(rs.getString("EXCH_ID"));				workAreaPrpty.setLocalNetId(rs.getString("LOCAL_NET_ID"));				workAreaPrpty.setMatchValue(rs.getString("MATCH_VALUE"));				workAreaPrpty.setPriority(rs.getString("PRIORITY"));				workAreaPrpty.setProdId(rs.getString("PROD_ID"));				workAreaPrpty.setPrptyId(rs.getString("PRPTY_ID"));				workAreaPrpty.setPrptyType(rs.getString("PRPTY_TYPE"));				workAreaPrpty.setRemarks(rs.getString("REMARKS"));				workAreaPrpty.setRuleId(rs.getString("RULE_ID"));				workAreaPrpty.setSts(rs.getString("STS"));				workAreaPrpty.setStsDate(rs.getTimestamp("STS_DATE"));				workAreaPrpty.setWorkAreaId(rs.getString("WORK_AREA_ID"));				workAreaPrpty.setWorkAreaPrptyId(rs.getString("WORK_AREA_PRPTY_ID"));				workAreaPrpty.setWorkTypeId(rs.getString("WORK_TYPE_ID"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return workAreaPrpty;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WorkAreaPrptySVO workAreaPrpty = (WorkAreaPrptySVO) vo;		List res = (List) CollectionFactory.createCollection(CollectionFactory.COLLECTION_LIST);		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT ACTION_ID,AREA_ID,EXCH_ID,LOCAL_NET_ID,MATCH_VALUE,PRIORITY,PROD_ID,PRPTY_ID,PRPTY_TYPE,REMARKS,RULE_ID,STS,STS_DATE,WORK_AREA_ID,WORK_AREA_PRPTY_ID,WORK_TYPE_ID FROM WORK_AREA_PRPTY WHERE 1=1 ");		try {			if (workAreaPrpty.getFlagActionId() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getActionId())) {					sql.append(" and ACTION_ID is null ");				} else {					sql.append(" and ACTION_ID=:actionId");					sql.setLong("actionId", workAreaPrpty.getActionId());				}			}			if (workAreaPrpty.getFlagAreaId() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getAreaId())) {					sql.append(" and AREA_ID is null ");				} else {					sql.append(" and AREA_ID=:areaId");					sql.setLong("areaId", workAreaPrpty.getAreaId());				}			}			if (workAreaPrpty.getFlagExchId() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getExchId())) {					sql.append(" and EXCH_ID is null ");				} else {					sql.append(" and EXCH_ID=:exchId");					sql.setLong("exchId", workAreaPrpty.getExchId());				}			}			if (workAreaPrpty.getFlagLocalNetId() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getLocalNetId())) {					sql.append(" and LOCAL_NET_ID is null ");				} else {					sql.append(" and LOCAL_NET_ID=:localNetId");					sql.setLong("localNetId", workAreaPrpty.getLocalNetId());				}			}			if (workAreaPrpty.getFlagMatchValue() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getMatchValue())) {					sql.append(" and MATCH_VALUE is null ");				} else {					sql.append(" and MATCH_VALUE=:matchValue");					sql.setString("matchValue", workAreaPrpty.getMatchValue());				}			}			if (workAreaPrpty.getFlagPriority() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getPriority())) {					sql.append(" and PRIORITY is null ");				} else {					sql.append(" and PRIORITY=:priority");					sql.setLong("priority", workAreaPrpty.getPriority());				}			}			if (workAreaPrpty.getFlagProdId() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getProdId())) {					sql.append(" and PROD_ID is null ");				} else {					sql.append(" and PROD_ID=:prodId");					sql.setString("prodId", workAreaPrpty.getProdId());				}			}			if (workAreaPrpty.getFlagPrptyId() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getPrptyId())) {					sql.append(" and PRPTY_ID is null ");				} else {					sql.append(" and PRPTY_ID=:prptyId");					sql.setLong("prptyId", workAreaPrpty.getPrptyId());				}			}			if (workAreaPrpty.getFlagPrptyType() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getPrptyType())) {					sql.append(" and PRPTY_TYPE is null ");				} else {					sql.append(" and PRPTY_TYPE=:prptyType");					sql.setString("prptyType", workAreaPrpty.getPrptyType());				}			}			if (workAreaPrpty.getFlagRemarks() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", workAreaPrpty.getRemarks());				}			}			if (workAreaPrpty.getFlagRuleId() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getRuleId())) {					sql.append(" and RULE_ID is null ");				} else {					sql.append(" and RULE_ID=:ruleId");					sql.setString("ruleId", workAreaPrpty.getRuleId());				}			}			if (workAreaPrpty.getFlagSts() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", workAreaPrpty.getSts());				}			}			if (workAreaPrpty.getFlagStsDate() == 1) {				if (workAreaPrpty.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", workAreaPrpty.getStsDate());				}			}			if (workAreaPrpty.getFlagWorkAreaId() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getWorkAreaId())) {					sql.append(" and WORK_AREA_ID is null ");				} else {					sql.append(" and WORK_AREA_ID=:workAreaId");					sql.setLong("workAreaId", workAreaPrpty.getWorkAreaId());				}			}			if (workAreaPrpty.getFlagWorkAreaPrptyId() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getWorkAreaPrptyId())) {					sql.append(" and WORK_AREA_PRPTY_ID is null ");				} else {					sql.append(" and WORK_AREA_PRPTY_ID=:workAreaPrptyId");					sql.setLong("workAreaPrptyId", workAreaPrpty.getWorkAreaPrptyId());				}			}			if (workAreaPrpty.getFlagWorkTypeId() == 1) {				if (StringUtil.isBlank(workAreaPrpty.getWorkTypeId())) {					sql.append(" and WORK_TYPE_ID is null ");				} else {					sql.append(" and WORK_TYPE_ID=:workTypeId");					sql.setLong("workTypeId", workAreaPrpty.getWorkTypeId());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				workAreaPrpty = new WorkAreaPrptySVO();				workAreaPrpty.setActionId(rs.getString("ACTION_ID"));				workAreaPrpty.setAreaId(rs.getString("AREA_ID"));				workAreaPrpty.setExchId(rs.getString("EXCH_ID"));				workAreaPrpty.setLocalNetId(rs.getString("LOCAL_NET_ID"));				workAreaPrpty.setMatchValue(rs.getString("MATCH_VALUE"));				workAreaPrpty.setPriority(rs.getString("PRIORITY"));				workAreaPrpty.setProdId(rs.getString("PROD_ID"));				workAreaPrpty.setPrptyId(rs.getString("PRPTY_ID"));				workAreaPrpty.setPrptyType(rs.getString("PRPTY_TYPE"));				workAreaPrpty.setRemarks(rs.getString("REMARKS"));				workAreaPrpty.setRuleId(rs.getString("RULE_ID"));				workAreaPrpty.setSts(rs.getString("STS"));				workAreaPrpty.setStsDate(rs.getTimestamp("STS_DATE"));				workAreaPrpty.setWorkAreaId(rs.getString("WORK_AREA_ID"));				workAreaPrpty.setWorkAreaPrptyId(rs.getString("WORK_AREA_PRPTY_ID"));				workAreaPrpty.setWorkTypeId(rs.getString("WORK_TYPE_ID"));				res.add(workAreaPrpty);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WorkAreaPrptySVO workAreaPrpty = (WorkAreaPrptySVO) vo;		if (StringUtil.isBlank(workAreaPrpty.getWorkAreaPrptyId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE WORK_AREA_PRPTY SET ");		try {			if (workAreaPrpty.getFlagActionId() == 1) {				sql.append("ACTION_ID=:actionId,");				sql.setLong("actionId", workAreaPrpty.getActionId());			}			if (workAreaPrpty.getFlagAreaId() == 1) {				sql.append("AREA_ID=:areaId,");				sql.setLong("areaId", workAreaPrpty.getAreaId());			}			if (workAreaPrpty.getFlagExchId() == 1) {				sql.append("EXCH_ID=:exchId,");				sql.setLong("exchId", workAreaPrpty.getExchId());			}			if (workAreaPrpty.getFlagLocalNetId() == 1) {				sql.append("LOCAL_NET_ID=:localNetId,");				sql.setLong("localNetId", workAreaPrpty.getLocalNetId());			}			if (workAreaPrpty.getFlagMatchValue() == 1) {				sql.append("MATCH_VALUE=:matchValue,");				sql.setString("matchValue", workAreaPrpty.getMatchValue());			}			if (workAreaPrpty.getFlagPriority() == 1) {				sql.append("PRIORITY=:priority,");				sql.setLong("priority", workAreaPrpty.getPriority());			}			if (workAreaPrpty.getFlagProdId() == 1) {				sql.append("PROD_ID=:prodId,");				sql.setString("prodId", workAreaPrpty.getProdId());			}			if (workAreaPrpty.getFlagPrptyId() == 1) {				sql.append("PRPTY_ID=:prptyId,");				sql.setLong("prptyId", workAreaPrpty.getPrptyId());			}			if (workAreaPrpty.getFlagPrptyType() == 1) {				sql.append("PRPTY_TYPE=:prptyType,");				sql.setString("prptyType", workAreaPrpty.getPrptyType());			}			if (workAreaPrpty.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", workAreaPrpty.getRemarks());			}			if (workAreaPrpty.getFlagRuleId() == 1) {				sql.append("RULE_ID=:ruleId,");				sql.setString("ruleId", workAreaPrpty.getRuleId());			}			if (workAreaPrpty.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", workAreaPrpty.getSts());			}			if (workAreaPrpty.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", workAreaPrpty.getStsDate());			}			if (workAreaPrpty.getFlagWorkAreaId() == 1) {				sql.append("WORK_AREA_ID=:workAreaId,");				sql.setLong("workAreaId", workAreaPrpty.getWorkAreaId());			}			if (workAreaPrpty.getFlagWorkTypeId() == 1) {				sql.append("WORK_TYPE_ID=:workTypeId,");				sql.setLong("workTypeId", workAreaPrpty.getWorkTypeId());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and WORK_AREA_PRPTY_ID=:workAreaPrptyId");			sql.setLong("workAreaPrptyId", workAreaPrpty.getWorkAreaPrptyId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO WORK_AREA_PRPTY(ACTION_ID,AREA_ID,EXCH_ID,LOCAL_NET_ID,MATCH_VALUE,PRIORITY,PROD_ID,PRPTY_ID,PRPTY_TYPE,REMARKS,RULE_ID,STS,STS_DATE,WORK_AREA_ID,WORK_AREA_PRPTY_ID,WORK_TYPE_ID)");		sql				.append(" VALUES (:actionId,:areaId,:exchId,:localNetId,:matchValue,:priority,:prodId,:prptyId,:prptyType,:remarks,:ruleId,:sts,:stsDate,:workAreaId,:workAreaPrptyId,:workTypeId)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				WorkAreaPrptySVO workAreaPrpty = (WorkAreaPrptySVO) list.get(i);				if (workAreaPrpty == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(workAreaPrpty.getWorkAreaPrptyId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (StringUtil.isBlank(workAreaPrpty.getActionId())) {					sql.setNullLong("actionId");				} else {					sql.setLong("actionId", workAreaPrpty.getActionId());				}				if (StringUtil.isBlank(workAreaPrpty.getAreaId())) {					sql.setNullLong("areaId");				} else {					sql.setLong("areaId", workAreaPrpty.getAreaId());				}				if (StringUtil.isBlank(workAreaPrpty.getExchId())) {					sql.setNullLong("exchId");				} else {					sql.setLong("exchId", workAreaPrpty.getExchId());				}				if (StringUtil.isBlank(workAreaPrpty.getLocalNetId())) {					sql.setNullLong("localNetId");				} else {					sql.setLong("localNetId", workAreaPrpty.getLocalNetId());				}				if (StringUtil.isBlank(workAreaPrpty.getMatchValue())) {					sql.setNullString("matchValue");				} else {					sql.setString("matchValue", workAreaPrpty.getMatchValue());				}				if (StringUtil.isBlank(workAreaPrpty.getPriority())) {					sql.setNullLong("priority");				} else {					sql.setLong("priority", workAreaPrpty.getPriority());				}				if (StringUtil.isBlank(workAreaPrpty.getProdId())) {					sql.setNullString("prodId");				} else {					sql.setString("prodId", workAreaPrpty.getProdId());				}				if (StringUtil.isBlank(workAreaPrpty.getPrptyId())) {					sql.setNullLong("prptyId");				} else {					sql.setLong("prptyId", workAreaPrpty.getPrptyId());				}				if (StringUtil.isBlank(workAreaPrpty.getPrptyType())) {					sql.setNullString("prptyType");				} else {					sql.setString("prptyType", workAreaPrpty.getPrptyType());				}				if (StringUtil.isBlank(workAreaPrpty.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", workAreaPrpty.getRemarks());				}				if (StringUtil.isBlank(workAreaPrpty.getRuleId())) {					sql.setNullString("ruleId");				} else {					sql.setString("ruleId", workAreaPrpty.getRuleId());				}				if (StringUtil.isBlank(workAreaPrpty.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", workAreaPrpty.getSts());				}				if (workAreaPrpty.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", workAreaPrpty.getStsDate());				}				if (StringUtil.isBlank(workAreaPrpty.getWorkAreaId())) {					sql.setNullLong("workAreaId");				} else {					sql.setLong("workAreaId", workAreaPrpty.getWorkAreaId());				}				if (StringUtil.isBlank(workAreaPrpty.getWorkAreaPrptyId())) {					sql.setNullLong("workAreaPrptyId");				} else {					sql.setLong("workAreaPrptyId", workAreaPrpty.getWorkAreaPrptyId());				}				if (StringUtil.isBlank(workAreaPrpty.getWorkTypeId())) {					sql.setNullLong("workTypeId");				} else {					sql.setLong("workTypeId", workAreaPrpty.getWorkTypeId());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		WorkAreaPrptySVO workAreaPrpty = (WorkAreaPrptySVO) vo;		if (StringUtil.isBlank(workAreaPrpty.getWorkAreaPrptyId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM WORK_AREA_PRPTY WHERE 1=1  ");		sql.append(" and WORK_AREA_PRPTY_ID=:workAreaPrptyId");		sql.setLong("workAreaPrptyId", workAreaPrpty.getWorkAreaPrptyId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		WorkAreaPrptySVO workAreaPrpty = (WorkAreaPrptySVO) vo;	}	public void unable(List voList) throws AppException, SysException {		if (voList == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE WORK_AREA_PRPTY SET ");		sql.append(" STS='");		sql.append(SysConstants.USE_NO_STS);		sql.append("' WHERE 1=1  ");		sql.append(" and WORK_AREA_PRPTY_ID=:workAreaPrptyId");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < voList.size(); i++) {				WorkAreaPrptyMVO wtnMVO = (WorkAreaPrptyMVO) (voList.get(i));				if (StringUtil.isBlank(wtnMVO.getWorkAreaPrptyId())) {					throw new AppException("100002", "缺少对象的主键！");				}				sql.setString("workAreaPrptyId", wtnMVO.getWorkAreaPrptyId());				ps = sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}}