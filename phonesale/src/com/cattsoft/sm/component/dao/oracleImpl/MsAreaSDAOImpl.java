package com.cattsoft.sm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import java.util.ArrayList;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.sm.component.dao.IMsAreaSDAO;import com.cattsoft.sm.vo.MsAreaSVO;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.pub.util.StringUtil;/** * 方法MsAreaSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class MsAreaSDAOImpl implements IMsAreaSDAO {	private static Logger log = Logger.getLogger(MsAreaSDAOImpl.class);	private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsAreaSVO msArea = (MsAreaSVO) vo;		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO MS_AREA(ABBREV_NAME,CREATE_DATE,ISCENTER,LATITUDE,LOCAL_NET_ID,LONGITUDE,MS_AREA_ID,NAME,STS,STS_DATE,AREA_ID)");		sql				.append(" VALUES (:abbrevName,:createDate,:iscenter,:latitude,:localNetId,:longitude,:msAreaId,:name,:sts,:stsDate,:areaId)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(msArea.getAbbrevName())) {				sql.setNullString("abbrevName");			} else {				sql.setString("abbrevName", msArea.getAbbrevName());			}			if (msArea.getCreateDate() == null) {				sql.setNullDate("createDate");			} else {				sql.setTimestamp("createDate", msArea.getCreateDate());			}			if (StringUtil.isBlank(msArea.getIscenter())) {				sql.setNullString("iscenter");			} else {				sql.setString("iscenter", msArea.getIscenter());			}			if (StringUtil.isBlank(msArea.getLatitude())) {				sql.setNullLong("latitude");			} else {				sql.setLong("latitude", msArea.getLatitude());			}			if (StringUtil.isBlank(msArea.getLocalNetId())) {				sql.setNullLong("localNetId");			} else {				sql.setLong("localNetId", msArea.getLocalNetId());			}			if (StringUtil.isBlank(msArea.getLongitude())) {				sql.setNullLong("longitude");			} else {				sql.setLong("longitude", msArea.getLongitude());			}			if (StringUtil.isBlank(msArea.getMsAreaId())) {				sql.setNullString("msAreaId");			} else {				sql.setString("msAreaId", msArea.getMsAreaId());			}			if (StringUtil.isBlank(msArea.getName())) {				sql.setNullString("name");			} else {				sql.setString("name", msArea.getName());			}			if (StringUtil.isBlank(msArea.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", msArea.getSts());			}			if (msArea.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", msArea.getStsDate());			}						if (StringUtil.isBlank(msArea.getAreaId())) {				sql.setNullString("areaId");			} else {				sql.setString("areaId", msArea.getAreaId());			}						sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsAreaSVO msArea = (MsAreaSVO) vo;		Sql sql = new Sql(				"SELECT ABBREV_NAME,CREATE_DATE,ISCENTER,LATITUDE,LOCAL_NET_ID,LONGITUDE,MS_AREA_ID,NAME,STS,STS_DATE,AREA_ID FROM MS_AREA WHERE 1=1  ");		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		msArea = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				msArea = new MsAreaSVO();				msArea.setAbbrevName(rs.getString("ABBREV_NAME"));				msArea.setCreateDate(rs.getTimestamp("CREATE_DATE"));				msArea.setIscenter(rs.getString("ISCENTER"));				msArea.setLatitude(rs.getString("LATITUDE"));				msArea.setLocalNetId(rs.getString("LOCAL_NET_ID"));				msArea.setLongitude(rs.getString("LONGITUDE"));				msArea.setMsAreaId(rs.getString("MS_AREA_ID"));				msArea.setName(rs.getString("NAME"));				msArea.setSts(rs.getString("STS"));				msArea.setStsDate(rs.getTimestamp("STS_DATE"));				msArea.setAreaId(rs.getString("AREA_ID"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return msArea;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsAreaSVO msArea = (MsAreaSVO) vo;		List res = new ArrayList();		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT ABBREV_NAME,CREATE_DATE,ISCENTER,LATITUDE,LOCAL_NET_ID,LONGITUDE,MS_AREA_ID,NAME,STS,STS_DATE,AREA_ID FROM MS_AREA WHERE 1=1 ");		try {			if (msArea.getFlagAbbrevName() == 1) {				if (StringUtil.isBlank(msArea.getAbbrevName())) {					sql.append(" and ABBREV_NAME is null ");				} else {					sql.append(" and ABBREV_NAME=:abbrevName");					sql.setString("abbrevName", msArea.getAbbrevName());				}			}			if (msArea.getFlagCreateDate() == 1) {				if (msArea.getCreateDate() == null) {					sql.append(" and CREATE_DATE is null ");				} else {					sql.append(" and CREATE_DATE=:createDate");					sql.setTimestamp("createDate", msArea.getCreateDate());				}			}			if (msArea.getFlagIscenter() == 1) {				if (StringUtil.isBlank(msArea.getIscenter())) {					sql.append(" and ISCENTER is null ");				} else {					sql.append(" and ISCENTER=:iscenter");					sql.setString("iscenter", msArea.getIscenter());				}			}			if (msArea.getFlagLatitude() == 1) {				if (StringUtil.isBlank(msArea.getLatitude())) {					sql.append(" and LATITUDE is null ");				} else {					sql.append(" and LATITUDE=:latitude");					sql.setLong("latitude", msArea.getLatitude());				}			}			if (msArea.getFlagLocalNetId() == 1) {				if (StringUtil.isBlank(msArea.getLocalNetId())) {					sql.append(" and LOCAL_NET_ID is null ");				} else {					sql.append(" and LOCAL_NET_ID=:localNetId");					sql.setLong("localNetId", msArea.getLocalNetId());				}			}			if (msArea.getFlagLongitude() == 1) {				if (StringUtil.isBlank(msArea.getLongitude())) {					sql.append(" and LONGITUDE is null ");				} else {					sql.append(" and LONGITUDE=:longitude");					sql.setLong("longitude", msArea.getLongitude());				}			}			if (msArea.getFlagMsAreaId() == 1) {				if (StringUtil.isBlank(msArea.getMsAreaId())) {					sql.append(" and MS_AREA_ID is null ");				} else {					sql.append(" and MS_AREA_ID=:msAreaId");					sql.setString("msAreaId", msArea.getMsAreaId());				}			}			if (msArea.getFlagName() == 1) {				if (StringUtil.isBlank(msArea.getName())) {					sql.append(" and NAME is null ");				} else {					sql.append(" and NAME=:name");					sql.setString("name", msArea.getName());				}			}			if (msArea.getFlagSts() == 1) {				if (StringUtil.isBlank(msArea.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", msArea.getSts());				}			}			if (msArea.getFlagStsDate() == 1) {				if (msArea.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", msArea.getStsDate());				}			}			if (msArea.getFlagAreaId() == 1) {				if (StringUtil.isBlank(msArea.getAreaId())) {					sql.append(" and AREA_ID is null ");				} else {					sql.append(" and AREA_ID=:areaId");					sql.setString("areaId", msArea.getAreaId());				}			}						conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				msArea = new MsAreaSVO();				msArea.setAbbrevName(rs.getString("ABBREV_NAME"));				msArea.setCreateDate(rs.getTimestamp("CREATE_DATE"));				msArea.setIscenter(rs.getString("ISCENTER"));				msArea.setLatitude(rs.getString("LATITUDE"));				msArea.setLocalNetId(rs.getString("LOCAL_NET_ID"));				msArea.setLongitude(rs.getString("LONGITUDE"));				msArea.setMsAreaId(rs.getString("MS_AREA_ID"));				msArea.setName(rs.getString("NAME"));				msArea.setSts(rs.getString("STS"));				msArea.setStsDate(rs.getTimestamp("STS_DATE"));				msArea.setAreaId(rs.getString("AREA_ID"));				res.add(msArea);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsAreaSVO msArea = (MsAreaSVO) vo;		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE MS_AREA SET ");		try {			if (msArea.getFlagAbbrevName() == 1) {				sql.append("ABBREV_NAME=:abbrevName,");				sql.setString("abbrevName", msArea.getAbbrevName());			}			if (msArea.getFlagCreateDate() == 1) {				sql.append("CREATE_DATE=:createDate,");				sql.setTimestamp("createDate", msArea.getCreateDate());			}			if (msArea.getFlagIscenter() == 1) {				sql.append("ISCENTER=:iscenter,");				sql.setString("iscenter", msArea.getIscenter());			}			if (msArea.getFlagLatitude() == 1) {				sql.append("LATITUDE=:latitude,");				sql.setLong("latitude", msArea.getLatitude());			}			if (msArea.getFlagLocalNetId() == 1) {				sql.append("LOCAL_NET_ID=:localNetId,");				sql.setLong("localNetId", msArea.getLocalNetId());			}			if (msArea.getFlagLongitude() == 1) {				sql.append("LONGITUDE=:longitude,");				sql.setLong("longitude", msArea.getLongitude());			}			if (msArea.getFlagMsAreaId() == 1) {				sql.append("MS_AREA_ID=:msAreaId,");				sql.setString("msAreaId", msArea.getMsAreaId());			}			if (msArea.getFlagName() == 1) {				sql.append("NAME=:name,");				sql.setString("name", msArea.getName());			}			if (msArea.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", msArea.getSts());			}			if (msArea.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", msArea.getStsDate());			}						if (msArea.getFlagAreaId() == 1) {				sql.append("AREA_ID=:areaId,");				sql.setString("areaId", msArea.getAreaId());			}						sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO MS_AREA(ABBREV_NAME,CREATE_DATE,ISCENTER,LATITUDE,LOCAL_NET_ID,LONGITUDE,MS_AREA_ID,NAME,STS,STS_DATE,AREA_ID)");		sql				.append(" VALUES (:abbrevName,:createDate,:iscenter,:latitude,:localNetId,:longitude,:msAreaId,:name,:sts,:stsDate,:areaId)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				MsAreaSVO msArea = (MsAreaSVO) list.get(i);				if (msArea == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(msArea.getAbbrevName())) {					sql.setNullString("abbrevName");				} else {					sql.setString("abbrevName", msArea.getAbbrevName());				}				if (msArea.getCreateDate() == null) {					sql.setNullDate("createDate");				} else {					sql.setTimestamp("createDate", msArea.getCreateDate());				}				if (StringUtil.isBlank(msArea.getIscenter())) {					sql.setNullString("iscenter");				} else {					sql.setString("iscenter", msArea.getIscenter());				}				if (StringUtil.isBlank(msArea.getLatitude())) {					sql.setNullLong("latitude");				} else {					sql.setLong("latitude", msArea.getLatitude());				}				if (StringUtil.isBlank(msArea.getLocalNetId())) {					sql.setNullLong("localNetId");				} else {					sql.setLong("localNetId", msArea.getLocalNetId());				}				if (StringUtil.isBlank(msArea.getLongitude())) {					sql.setNullLong("longitude");				} else {					sql.setLong("longitude", msArea.getLongitude());				}				if (StringUtil.isBlank(msArea.getMsAreaId())) {					sql.setNullString("msAreaId");				} else {					sql.setString("msAreaId", msArea.getMsAreaId());				}				if (StringUtil.isBlank(msArea.getName())) {					sql.setNullString("name");				} else {					sql.setString("name", msArea.getName());				}				if (StringUtil.isBlank(msArea.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", msArea.getSts());				}				if (msArea.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", msArea.getStsDate());				}								if (StringUtil.isBlank(msArea.getAreaId())) {					sql.setNullString("areaId");				} else {					sql.setString("areaId", msArea.getAreaId());				}								sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		MsAreaSVO msArea = (MsAreaSVO) vo;		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM MS_AREA WHERE 1=1  ");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		MsAreaSVO msArea = (MsAreaSVO) vo;	}}