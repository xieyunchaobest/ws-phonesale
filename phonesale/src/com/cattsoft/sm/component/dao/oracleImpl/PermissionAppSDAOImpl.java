package com.cattsoft.sm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.CollectionFactory;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.sm.component.dao.IPermissionAppSDAO;import com.cattsoft.sm.vo.PermissionAppSVO;/** * 方法PermissionAppSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class PermissionAppSDAOImpl implements IPermissionAppSDAO {	// private static Logger log =	// Logger.getLogger(PermissionAppSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		PermissionAppSVO permissionApp = (PermissionAppSVO) vo;		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO PERMISSION_APP(APP_ID,COMMON_ID,LOCAL_NET_ID,PERMISSION,PERMISSION_APP_ID,STS,STS_DATE,DEFAULT_APP)");		sql				.append(" VALUES (:appId,:commonId,:localNetId,:permission,:permissionAppId,:sts,:stsDate,:defaultApp)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (StringUtil.isBlank(permissionApp.getAppId())) {				sql.setNullString("appId");			} else {				sql.setString("appId", permissionApp.getAppId());			}			if (StringUtil.isBlank(permissionApp.getCommonId())) {				sql.setNullString("commonId");			} else {				sql.setString("commonId", permissionApp.getCommonId());			}			if (StringUtil.isBlank(permissionApp.getLocalNetId())) {				sql.setNullLong("localNetId");			} else {				sql.setLong("localNetId", permissionApp.getLocalNetId());			}			if (StringUtil.isBlank(permissionApp.getPermission())) {				sql.setNullString("permission");			} else {				sql.setString("permission", permissionApp.getPermission());			}			if (StringUtil.isBlank(permissionApp.getPermissionAppId())) {				sql.setNullLong("permissionAppId");			} else {				sql.setLong("permissionAppId", permissionApp						.getPermissionAppId());			}			if (StringUtil.isBlank(permissionApp.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", permissionApp.getSts());			}			if (permissionApp.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", permissionApp.getStsDate());			}			if (permissionApp.getDefaultApp() == null) {				sql.setNullString("defaultApp");			} else {				sql.setString("defaultApp", permissionApp.getDefaultApp());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		PermissionAppSVO permissionApp = (PermissionAppSVO) vo;		Sql sql = new Sql(				"SELECT APP_ID,COMMON_ID,LOCAL_NET_ID,PERMISSION,PERMISSION_APP_ID,STS,STS_DATE,DEFAULT_APP FROM PERMISSION_APP WHERE 1=1  ");		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		permissionApp = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				permissionApp = new PermissionAppSVO();				permissionApp.setAppId(rs.getString("APP_ID"));				permissionApp.setCommonId(rs.getString("COMMON_ID"));				permissionApp.setLocalNetId(rs.getString("LOCAL_NET_ID"));				permissionApp.setPermission(rs.getString("PERMISSION"));				permissionApp.setPermissionAppId(rs						.getString("PERMISSION_APP_ID"));				permissionApp.setSts(rs.getString("STS"));				permissionApp.setStsDate(rs.getTimestamp("STS_DATE"));				permissionApp.setDefaultApp(rs.getString("DEFAULT_APP"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return permissionApp;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		PermissionAppSVO permissionApp = (PermissionAppSVO) vo;		List res = (List)CollectionFactory.createCollection(CollectionFactory.COLLECTION_LIST);		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT APP_ID,COMMON_ID,LOCAL_NET_ID,PERMISSION,PERMISSION_APP_ID,STS,STS_DATE,DEFAULT_APP FROM PERMISSION_APP WHERE 1=1 ");		try {			if (permissionApp.getFlagAppId() == 1) {				if (StringUtil.isBlank(permissionApp.getAppId())) {					sql.append(" and APP_ID is null ");				} else {					sql.append(" and APP_ID=:appId");					sql.setString("appId", permissionApp.getAppId());				}			}			if (permissionApp.getFlagCommonId() == 1) {				if (StringUtil.isBlank(permissionApp.getCommonId())) {					sql.append(" and COMMON_ID is null ");				} else {					sql.append(" and COMMON_ID=:commonId");					sql.setString("commonId", permissionApp.getCommonId());				}			}			if (permissionApp.getFlagLocalNetId() == 1) {				if (StringUtil.isBlank(permissionApp.getLocalNetId())) {					sql.append(" and LOCAL_NET_ID is null ");				} else {					sql.append(" and LOCAL_NET_ID=:localNetId");					sql.setLong("localNetId", permissionApp.getLocalNetId());				}			}			if (permissionApp.getFlagPermission() == 1) {				if (StringUtil.isBlank(permissionApp.getPermission())) {					sql.append(" and PERMISSION is null ");				} else {					sql.append(" and PERMISSION=:permission");					sql.setString("permission", permissionApp.getPermission());				}			}			if (permissionApp.getFlagPermissionAppId() == 1) {				if (StringUtil.isBlank(permissionApp.getPermissionAppId())) {					sql.append(" and PERMISSION_APP_ID is null ");				} else {					sql.append(" and PERMISSION_APP_ID=:permissionAppId");					sql.setLong("permissionAppId", permissionApp							.getPermissionAppId());				}			}			if (permissionApp.getFlagSts() == 1) {				if (StringUtil.isBlank(permissionApp.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", permissionApp.getSts());				}			}			if (permissionApp.getFlagStsDate() == 1) {				if (permissionApp.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", permissionApp.getStsDate());				}			}			if (permissionApp.getFlagDefaultApp() == 1) {				if (permissionApp.getDefaultApp() == null) {					sql.append(" and DEFAULT_APP is null ");				} else {					sql.append(" and DEFAULT_APP=:defaultApp");					sql.setString("defaultApp", permissionApp.getDefaultApp());				}			}						conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				permissionApp = new PermissionAppSVO();				permissionApp.setAppId(rs.getString("APP_ID"));				permissionApp.setCommonId(rs.getString("COMMON_ID"));				permissionApp.setLocalNetId(rs.getString("LOCAL_NET_ID"));				permissionApp.setPermission(rs.getString("PERMISSION"));				permissionApp.setPermissionAppId(rs						.getString("PERMISSION_APP_ID"));				permissionApp.setSts(rs.getString("STS"));				permissionApp.setStsDate(rs.getTimestamp("STS_DATE"));				permissionApp.setDefaultApp(rs.getString("DEFAULT_APP"));				res.add(permissionApp);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		PermissionAppSVO permissionApp = (PermissionAppSVO) vo;		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE PERMISSION_APP SET ");		try {			if (permissionApp.getFlagAppId() == 1) {				sql.append("APP_ID=:appId,");				sql.setString("appId", permissionApp.getAppId());			}			if (permissionApp.getFlagCommonId() == 1) {				sql.append("COMMON_ID=:commonId,");				sql.setString("commonId", permissionApp.getCommonId());			}			if (permissionApp.getFlagLocalNetId() == 1) {				sql.append("LOCAL_NET_ID=:localNetId,");				sql.setLong("localNetId", permissionApp.getLocalNetId());			}			if (permissionApp.getFlagPermission() == 1) {				sql.append("PERMISSION=:permission,");				sql.setString("permission", permissionApp.getPermission());			}			if (permissionApp.getFlagPermissionAppId() == 1) {				sql.append("PERMISSION_APP_ID=:permissionAppId,");				sql.setLong("permissionAppId", permissionApp						.getPermissionAppId());			}			if (permissionApp.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", permissionApp.getSts());			}			if (permissionApp.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", permissionApp.getStsDate());			}						if (permissionApp.getFlagDefaultApp() == 1) {				sql.append("DEFAULT_APP=:defaultApp,");				sql.setString("defaultApp", permissionApp.getDefaultApp());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO PERMISSION_APP(APP_ID,COMMON_ID,LOCAL_NET_ID,PERMISSION,PERMISSION_APP_ID,STS,STS_DATE,DEFAULT_APP)");		sql				.append(" VALUES (:appId,:commonId,:localNetId,:permission,:permissionAppId,:sts,:stsDate,:defaultApp)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				PermissionAppSVO permissionApp = (PermissionAppSVO) list.get(i);				if (permissionApp == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(permissionApp.getAppId())) {					sql.setNullString("appId");				} else {					sql.setString("appId", permissionApp.getAppId());				}				if (StringUtil.isBlank(permissionApp.getCommonId())) {					sql.setNullString("commonId");				} else {					sql.setString("commonId", permissionApp.getCommonId());				}				if (StringUtil.isBlank(permissionApp.getLocalNetId())) {					sql.setNullLong("localNetId");				} else {					sql.setLong("localNetId", permissionApp.getLocalNetId());				}				if (StringUtil.isBlank(permissionApp.getPermission())) {					sql.setNullString("permission");				} else {					sql.setString("permission", permissionApp.getPermission());				}				if (StringUtil.isBlank(permissionApp.getPermissionAppId())) {					sql.setNullLong("permissionAppId");				} else {					sql.setLong("permissionAppId", permissionApp							.getPermissionAppId());				}				if (StringUtil.isBlank(permissionApp.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", permissionApp.getSts());				}				if (permissionApp.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", permissionApp.getStsDate());				}								if (permissionApp.getDefaultApp() == null) {					sql.setNullString("defaultApp");				} else {					sql.setString("defaultApp", permissionApp.getDefaultApp());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		PermissionAppSVO permissionApp = (PermissionAppSVO) vo;		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM PERMISSION_APP WHERE 1=1  ");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		// PermissionAppSVO permissionApp=(PermissionAppSVO) vo;	}}