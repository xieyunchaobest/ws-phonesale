package com.cattsoft.sm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.sm.component.dao.IMosFuncNodeSDAO;import com.cattsoft.sm.vo.MosFuncNodeSVO; /**   * 方法MosFuncNodeSDAOImpl   * <p>Company: 大唐软件</p>   * @author ：白小亮。   * @version 1.1  2007-9-23  */public class MosFuncNodeSDAOImpl implements IMosFuncNodeSDAO{    private static Logger log = Logger.getLogger(MosFuncNodeSDAOImpl.class);    private static final String UNABLE_STS = "P";  /**   * 增加。   * @return String  */ public void add(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     MosFuncNodeSVO mosFuncNode=(MosFuncNodeSVO) vo;    if (StringUtil.isBlank(mosFuncNode.getMosFuncNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }      Connection conn = null;      PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO MOS_FUNC_NODE(CREATE_TIME,FUNCC_LEVEL,MOS_FUNC_NODE_ID,NAME,ORDER_NO,SHORT_NAME,STS,TYPE)");sql.append(" VALUES (:createTime,:funccLevel,:mosFuncNodeId,:name,:orderNo,:shortName,:sts,:type)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());   if (mosFuncNode.getCreateTime() == null) {      sql.setNullDate("createTime");     } else {    sql.setTimestamp("createTime", mosFuncNode.getCreateTime());    }       if (StringUtil.isBlank(mosFuncNode.getFunccLevel())) {      sql.setNullString("funccLevel");     } else {    sql.setString("funccLevel", mosFuncNode.getFunccLevel());    }       if (StringUtil.isBlank(mosFuncNode.getMosFuncNodeId())) {      sql.setNullLong("mosFuncNodeId");     } else {    sql.setLong("mosFuncNodeId", mosFuncNode.getMosFuncNodeId());    }       if (StringUtil.isBlank(mosFuncNode.getName())) {      sql.setNullString("name");     } else {    sql.setString("name", mosFuncNode.getName());    }       if (StringUtil.isBlank(mosFuncNode.getOrderNo())) {      sql.setNullLong("orderNo");     } else {    sql.setLong("orderNo", mosFuncNode.getOrderNo());    }       if (StringUtil.isBlank(mosFuncNode.getShortName())) {      sql.setNullString("shortName");     } else {    sql.setString("shortName", mosFuncNode.getShortName());    }       if (StringUtil.isBlank(mosFuncNode.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", mosFuncNode.getSts());    }       if (StringUtil.isBlank(mosFuncNode.getType())) {      sql.setNullString("type");     } else {    sql.setString("type", mosFuncNode.getType());    }            sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 主键查询的SQL。   * @return String ： 主键查询的SQL。  */ public GenericVO findByPK(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     MosFuncNodeSVO mosFuncNode=(MosFuncNodeSVO) vo;    if (StringUtil.isBlank(mosFuncNode.getMosFuncNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }       Sql sql = new Sql("SELECT CREATE_TIME,FUNCC_LEVEL,MOS_FUNC_NODE_ID,NAME,ORDER_NO,SHORT_NAME,STS,TYPE FROM MOS_FUNC_NODE WHERE 1=1  ");sql.append(" and MOS_FUNC_NODE_ID=:mosFuncNodeId");sql.setLong("mosFuncNodeId", mosFuncNode.getMosFuncNodeId());       Connection conn = null;      PreparedStatement ps = null;      ResultSet rs = null;      mosFuncNode =null;      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();            while (rs.next()) {           mosFuncNode = new MosFuncNodeSVO();           mosFuncNode.setCreateTime(rs.getTimestamp("CREATE_TIME"));           mosFuncNode.setFunccLevel(rs.getString("FUNCC_LEVEL"));           mosFuncNode.setMosFuncNodeId(rs.getString("MOS_FUNC_NODE_ID"));           mosFuncNode.setName(rs.getString("NAME"));           mosFuncNode.setOrderNo(rs.getString("ORDER_NO"));           mosFuncNode.setShortName(rs.getString("SHORT_NAME"));           mosFuncNode.setSts(rs.getString("STS"));           mosFuncNode.setType(rs.getString("TYPE"));                 }           } catch (SQLException se) {             throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(rs,ps);           }           return mosFuncNode;         } /**   * 批量查询的SQL。   * @return String ： 批量查询的SQL。  */ public List findByVO(GenericVO vo) throws AppException, SysException{         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       MosFuncNodeSVO mosFuncNode=(MosFuncNodeSVO) vo;          List res = new ArrayList();          Connection conn = null;          PreparedStatement ps = null;          ResultSet rs = null;          Sql sql = new Sql("SELECT CREATE_TIME,FUNCC_LEVEL,MOS_FUNC_NODE_ID,NAME,ORDER_NO,SHORT_NAME,STS,TYPE FROM MOS_FUNC_NODE WHERE 1=1 ");     try {if (mosFuncNode.getFlagCreateTime() == 1) {      if (mosFuncNode.getCreateTime() == null) {             sql.append(" and CREATE_TIME is null ");          }      else{             sql.append(" and CREATE_TIME=:createTime");             sql.setTimestamp("createTime", mosFuncNode.getCreateTime());          }   } if (mosFuncNode.getFlagFunccLevel() == 1) {      if (StringUtil.isBlank(mosFuncNode.getFunccLevel())) {             sql.append(" and FUNCC_LEVEL is null ");          }      else{             sql.append(" and FUNCC_LEVEL=:funccLevel");             sql.setString("funccLevel", mosFuncNode.getFunccLevel());          }   } if (mosFuncNode.getFlagMosFuncNodeId() == 1) {      if (StringUtil.isBlank(mosFuncNode.getMosFuncNodeId())) {             sql.append(" and MOS_FUNC_NODE_ID is null ");          }      else{             sql.append(" and MOS_FUNC_NODE_ID=:mosFuncNodeId");             sql.setLong("mosFuncNodeId", mosFuncNode.getMosFuncNodeId());          }   } if (mosFuncNode.getFlagName() == 1) {      if (StringUtil.isBlank(mosFuncNode.getName())) {             sql.append(" and NAME is null ");          }      else{             sql.append(" and NAME=:name");             sql.setString("name", mosFuncNode.getName());          }   } if (mosFuncNode.getFlagOrderNo() == 1) {      if (StringUtil.isBlank(mosFuncNode.getOrderNo())) {             sql.append(" and ORDER_NO is null ");          }      else{             sql.append(" and ORDER_NO=:orderNo");             sql.setLong("orderNo", mosFuncNode.getOrderNo());          }   } if (mosFuncNode.getFlagShortName() == 1) {      if (StringUtil.isBlank(mosFuncNode.getShortName())) {             sql.append(" and SHORT_NAME is null ");          }      else{             sql.append(" and SHORT_NAME=:shortName");             sql.setString("shortName", mosFuncNode.getShortName());          }   } if (mosFuncNode.getFlagSts() == 1) {      if (StringUtil.isBlank(mosFuncNode.getSts())) {             sql.append(" and STS is null ");          }      else{             sql.append(" and STS=:sts");             sql.setString("sts", mosFuncNode.getSts());          }   } if (mosFuncNode.getFlagType() == 1) {      if (StringUtil.isBlank(mosFuncNode.getType())) {             sql.append(" and TYPE is null ");          }      else{             sql.append(" and TYPE=:type");             sql.setString("type", mosFuncNode.getType());          }   }sql.append(" order by ORDER_NO");           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           rs = ps.executeQuery();                    while (rs.next()) {           mosFuncNode = new MosFuncNodeSVO();           mosFuncNode.setCreateTime(rs.getTimestamp("CREATE_TIME"));           mosFuncNode.setFunccLevel(rs.getString("FUNCC_LEVEL"));           mosFuncNode.setMosFuncNodeId(rs.getString("MOS_FUNC_NODE_ID"));           mosFuncNode.setName(rs.getString("NAME"));           mosFuncNode.setOrderNo(rs.getString("ORDER_NO"));           mosFuncNode.setShortName(rs.getString("SHORT_NAME"));           mosFuncNode.setSts(rs.getString("STS"));           mosFuncNode.setType(rs.getString("TYPE"));               res.add(mosFuncNode);                            }          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(rs,ps);               }                         if(0 == res.size()) res = null;          return res;   } /**   * 更新的SQL。   * @return String ： 更新的SQL。  */ public void update(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }       MosFuncNodeSVO mosFuncNode=(MosFuncNodeSVO) vo;    if (StringUtil.isBlank(mosFuncNode.getMosFuncNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;          Sql sql = new Sql("UPDATE MOS_FUNC_NODE SET ");     try {if (mosFuncNode.getFlagCreateTime() == 1) {sql.append("CREATE_TIME=:createTime,"); sql.setTimestamp("createTime", mosFuncNode.getCreateTime()); } if (mosFuncNode.getFlagFunccLevel() == 1) {sql.append("FUNCC_LEVEL=:funccLevel,"); sql.setString("funccLevel", mosFuncNode.getFunccLevel()); } if (mosFuncNode.getFlagName() == 1) {sql.append("NAME=:name,"); sql.setString("name", mosFuncNode.getName()); } if (mosFuncNode.getFlagOrderNo() == 1) {sql.append("ORDER_NO=:orderNo,");sql.setLong("orderNo", mosFuncNode.getOrderNo()); } if (mosFuncNode.getFlagShortName() == 1) {sql.append("SHORT_NAME=:shortName,"); sql.setString("shortName", mosFuncNode.getShortName()); } if (mosFuncNode.getFlagSts() == 1) {sql.append("STS=:sts,"); sql.setString("sts", mosFuncNode.getSts()); } if (mosFuncNode.getFlagType() == 1) {sql.append("TYPE=:type,"); sql.setString("type", mosFuncNode.getType()); }            	sql.removeSuffix(1); sql.append(" WHERE 1=1 ");sql.append(" and MOS_FUNC_NODE_ID=:mosFuncNodeId");sql.setLong("mosFuncNodeId", mosFuncNode.getMosFuncNodeId());            conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           ps = sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();                    } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);            } finally {                JdbcUtil.close(ps);               }                  } /**   * 批量增加记录。   * @return String ： 批量增加的SQL。  */ public void addBat(List list)throws AppException, SysException {     if (list == null) {     throw new AppException("100001", "缺少DAO操作对象！");           }          Connection conn = null;          PreparedStatement ps = null;Sql sql = new Sql("INSERT INTO MOS_FUNC_NODE(CREATE_TIME,FUNCC_LEVEL,MOS_FUNC_NODE_ID,NAME,ORDER_NO,SHORT_NAME,STS,TYPE)");sql.append(" VALUES (:createTime,:funccLevel,:mosFuncNodeId,:name,:orderNo,:shortName,:sts,:type)");      try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());    for(int i=0;i<list.size();i++){       MosFuncNodeSVO mosFuncNode=(MosFuncNodeSVO) list.get(i);         if (mosFuncNode== null) {         throw new AppException("100001", "缺少DAO操作对象！");       }    if (StringUtil.isBlank(mosFuncNode.getMosFuncNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }   if (mosFuncNode.getCreateTime() == null) {      sql.setNullDate("createTime");     } else {    sql.setTimestamp("createTime", mosFuncNode.getCreateTime());    }       if (StringUtil.isBlank(mosFuncNode.getFunccLevel())) {      sql.setNullString("funccLevel");     } else {    sql.setString("funccLevel", mosFuncNode.getFunccLevel());    }       if (StringUtil.isBlank(mosFuncNode.getMosFuncNodeId())) {      sql.setNullLong("mosFuncNodeId");     } else {    sql.setLong("mosFuncNodeId", mosFuncNode.getMosFuncNodeId());    }       if (StringUtil.isBlank(mosFuncNode.getName())) {      sql.setNullString("name");     } else {    sql.setString("name", mosFuncNode.getName());    }       if (StringUtil.isBlank(mosFuncNode.getOrderNo())) {      sql.setNullLong("orderNo");     } else {    sql.setLong("orderNo", mosFuncNode.getOrderNo());    }       if (StringUtil.isBlank(mosFuncNode.getShortName())) {      sql.setNullString("shortName");     } else {    sql.setString("shortName", mosFuncNode.getShortName());    }       if (StringUtil.isBlank(mosFuncNode.getSts())) {      sql.setNullString("sts");     } else {    sql.setString("sts", mosFuncNode.getSts());    }       if (StringUtil.isBlank(mosFuncNode.getType())) {      sql.setNullString("type");     } else {    sql.setString("type", mosFuncNode.getType());    }            sql.fillParams(ps);           sql.log(this.getClass());           sql.clearParameters();           ps.addBatch();           }                  ps.executeBatch();          } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);           } finally {                    JdbcUtil.close(ps);           }  } /**   * 根据传入参数删除一条或者一批记录。   * @return String ： 删除的SQL。  */ public void delete(GenericVO vo)throws AppException, SysException {         if (vo== null) {         throw new AppException("100001", "缺少DAO操作对象！");        }     MosFuncNodeSVO mosFuncNode=(MosFuncNodeSVO) vo;    if (StringUtil.isBlank(mosFuncNode.getMosFuncNodeId())) {       throw new AppException("100002", "缺少对象的主键！");      }          Connection conn = null;          PreparedStatement ps = null;       Sql sql = new Sql("DELETE FROM MOS_FUNC_NODE WHERE 1=1  ");sql.append(" and MOS_FUNC_NODE_ID=:mosFuncNodeId");sql.setLong("mosFuncNodeId", mosFuncNode.getMosFuncNodeId());       try {           conn = ConnectionFactory.getConnection();           ps = conn.prepareStatement(sql.getSql());           sql.fillParams(ps);           sql.log(this.getClass());           ps.executeUpdate();            } catch (SQLException se) {           throw new SysException("100003", "JDBC操作异常！", se);                      } finally {                    JdbcUtil.close(ps);           }         } /**   * 注销一条或者一批   * @return String ： 注销一条或者一批的SQL。  */ public void unable(GenericVO vo)throws AppException, SysException {     MosFuncNodeSVO mosFuncNode=(MosFuncNodeSVO) vo;       }}
