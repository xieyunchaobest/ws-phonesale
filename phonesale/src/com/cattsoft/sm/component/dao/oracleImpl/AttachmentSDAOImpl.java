package com.cattsoft.sm.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.List;import org.apache.log4j.Logger;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.CollectionFactory;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.sm.component.dao.IAttachmentSDAO;import com.cattsoft.sm.vo.AttachmentSVO;/** * 方法SoAttachSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class AttachmentSDAOImpl implements IAttachmentSDAO {	private static Logger log = Logger.getLogger(AttachmentSDAOImpl.class);	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		AttachmentSVO attach = (AttachmentSVO) vo;		if (StringUtil.isBlank(attach.getAttachmentId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO ATTACHMENT(ATTACHMENT,FILE_NAME,LOCAL_NET_ID,REMARKS,ATTACHMENT_ID,FOR_SCENE,STS,STS_DATE,OBJECT_ID)");		sql				.append(" VALUES (:attachment,:fileName,:localNetId,:remarks,:attachmentId,:forScene,:sts,:stsDate,:objectId)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (attach.getAttachment() == null) {				sql.setNullBlob("attachment");			} else {				sql.setBlob("attachment", attach.getAttachment());			}			if (StringUtil.isBlank(attach.getFileName())) {				sql.setNullString("fileName");			} else {				sql.setString("fileName", attach.getFileName());			}			if (StringUtil.isBlank(attach.getLocalNetId())) {				sql.setNullLong("localNetId");			} else {				sql.setLong("localNetId", attach.getLocalNetId());			}			if (StringUtil.isBlank(attach.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", attach.getRemarks());			}			if (StringUtil.isBlank(attach.getAttachmentId())) {				sql.setNullLong("attachmentId");			} else {				sql.setLong("attachmentId", attach.getAttachmentId());			}			if (StringUtil.isBlank(attach.getForScene())) {				sql.setNullString("forScene");			} else {				sql.setString("forScene", attach.getForScene());			}			if (StringUtil.isBlank(attach.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", attach.getSts());			}			if (attach.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", attach.getStsDate());			}			if (StringUtil.isBlank(attach.getObjectId())) {				sql.setNullLong("objectId");			} else {				sql.setLong("objectId", attach.getObjectId());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		AttachmentSVO attach = (AttachmentSVO) vo;		if (StringUtil.isBlank(attach.getAttachmentId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT ATTACHMENT,FILE_NAME,LOCAL_NET_ID,REMARKS,ATTACHMENT_ID,FOR_SCENE,STS,STS_DATE,OBJECT_ID FROM ATTACHMENT WHERE 1=1  ");		sql.append(" and ATTACHMENT_ID=:attachmentId");		sql.setLong("attachmentId", attach.getAttachmentId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		attach = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				attach = new AttachmentSVO();				attach.setAttachment(rs.getBlob("ATTACHMENT"));				attach.setFileName(rs.getString("FILE_NAME"));				attach.setLocalNetId(rs.getString("LOCAL_NET_ID"));				attach.setRemarks(rs.getString("REMARKS"));				attach.setAttachmentId(rs.getString("ATTACHMENT_ID"));				attach.setForScene(rs.getString("FOR_SCENE"));				attach.setSts(rs.getString("STS"));				attach.setStsDate(rs.getTimestamp("STS_DATE"));				attach.setObjectId(rs.getString("OBJECT_ID"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return attach;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		AttachmentSVO attach = (AttachmentSVO) vo;		List res = (List)CollectionFactory.createCollection(CollectionFactory.COLLECTION_LIST);		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT FILE_NAME,LOCAL_NET_ID,REMARKS,ATTACHMENT_ID,FOR_SCENE,STS,STS_DATE,OBJECT_ID FROM ATTACHMENT WHERE 1=1 ");		try {			if (attach.getFlagFileName() == 1) {				if (StringUtil.isBlank(attach.getFileName())) {					sql.append(" and FILE_NAME is null ");				} else {					sql.append(" and FILE_NAME=:fileName");					sql.setString("fileName", attach.getFileName());				}			}			if (attach.getFlagLocalNetId() == 1) {				if (StringUtil.isBlank(attach.getLocalNetId())) {					sql.append(" and LOCAL_NET_ID is null ");				} else {					sql.append(" and LOCAL_NET_ID=:localNetId");					sql.setLong("localNetId", attach.getLocalNetId());				}			}			if (attach.getFlagRemarks() == 1) {				if (StringUtil.isBlank(attach.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", attach.getRemarks());				}			}			if (attach.getFlagAttachmentId() == 1) {				if (StringUtil.isBlank(attach.getAttachmentId())) {					sql.append(" and ATTACHMENT_ID is null ");				} else {					sql.append(" and ATTACHMENT_ID=:attachmentId");					sql.setLong("attachmentId", attach.getAttachmentId());				}			}			if (attach.getFlagForScene() == 1) {				if (StringUtil.isBlank(attach.getForScene())) {					sql.append(" and FOR_SCENE is null ");				} else {					sql.append(" and FOR_SCENE=:forScene");					sql.setString("forScene", attach.getForScene());				}			}			if (attach.getFlagSts() == 1) {				if (StringUtil.isBlank(attach.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", attach.getSts());				}			}			if (attach.getFlagStsDate() == 1) {				if (attach.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", attach.getStsDate());				}			}			if (attach.getFlagObjectId() == 1) {				if (StringUtil.isBlank(attach.getObjectId())) {					sql.append(" and OBJECT_ID is null ");				} else {					sql.append(" and OBJECT_ID=:objectId");					sql.setLong("objectId", attach.getObjectId());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				attach = new AttachmentSVO();				//soAttach.setAttachment(rs.getBlob("ATTACHMENT"));				attach.setFileName(rs.getString("FILE_NAME"));				attach.setLocalNetId(rs.getString("LOCAL_NET_ID"));				attach.setRemarks(rs.getString("REMARKS"));				attach.setAttachmentId(rs.getString("ATTACHMENT_ID"));				attach.setForScene(rs.getString("FOR_SCENE"));				attach.setSts(rs.getString("STS"));				attach.setStsDate(rs.getTimestamp("STS_DATE"));				attach.setObjectId(rs.getString("OBJECT_ID"));				res.add(attach);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		AttachmentSVO attach = (AttachmentSVO) vo;		if (StringUtil.isBlank(attach.getAttachmentId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE ATTACHMENT SET ");		try {			if (attach.getFlagFileName() == 1) {				sql.append("FILE_NAME=:fileName,");				sql.setString("fileName", attach.getFileName());			}			if (attach.getFlagLocalNetId() == 1) {				sql.append("LOCAL_NET_ID=:localNetId,");				sql.setLong("localNetId", attach.getLocalNetId());			}			if (attach.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", attach.getRemarks());			}			if (attach.getFlagForScene() == 1) {				sql.append("FOR_SCENE=:forScene,");				sql.setString("forScene", attach.getForScene());			}			if (attach.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", attach.getSts());			}			if (attach.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", attach.getStsDate());			}			if (attach.getFlagObjectId() == 1) {				sql.append("OBJECT_ID=:objectId,");				sql.setLong("objectId", attach.getObjectId());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and ATTACHMENT_ID=:attachmentId");			sql.setLong("attachmentId", attach.getAttachmentId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO ATTACHMENT(ATTACHMENT,FILE_NAME,LOCAL_NET_ID,REMARKS,ATTACHMENT_ID,FOR_SCENE,STS,STS_DATE,OBJECT_ID)");		sql				.append(" VALUES (:attachment,:fileName,:localNetId,:remarks,:attachmentId,:forScene,:sts,:stsDate,:objectId)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				AttachmentSVO attach = (AttachmentSVO) list.get(i);				if (attach == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(attach.getAttachmentId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (attach.getAttachment() == null) {					sql.setNullBlob("attachment");				} else {					sql.setBlob("attachment", attach.getAttachment());				}				if (StringUtil.isBlank(attach.getFileName())) {					sql.setNullString("fileName");				} else {					sql.setString("fileName", attach.getFileName());				}				if (StringUtil.isBlank(attach.getLocalNetId())) {					sql.setNullLong("localNetId");				} else {					sql.setLong("localNetId", attach.getLocalNetId());				}				if (StringUtil.isBlank(attach.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", attach.getRemarks());				}				if (StringUtil.isBlank(attach.getAttachmentId())) {					sql.setNullLong("attachmentId");				} else {					sql.setLong("attachmentId", attach.getAttachmentId());				}				if (StringUtil.isBlank(attach.getForScene())) {					sql.setNullString("forScene");				} else {					sql.setString("forScene", attach.getForScene());				}				if (StringUtil.isBlank(attach.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", attach.getSts());				}				if (attach.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", attach.getStsDate());				}				if (StringUtil.isBlank(attach.getObjectId())) {					sql.setNullLong("objectId");				} else {					sql.setLong("objectId", attach.getObjectId());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		AttachmentSVO attach = (AttachmentSVO) vo;		if (StringUtil.isBlank(attach.getAttachmentId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM ATTACHMENT WHERE 1=1  ");		sql.append(" and ATTACHMENT_ID=:attachmentId");		sql.setLong("attachmentId", attach.getAttachmentId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {	}}