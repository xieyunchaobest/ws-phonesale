package com.cattsoft.sp.component.dao.oracleImpl;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.cattsoft.pub.connection.ConnectionFactory;import com.cattsoft.pub.dao.Sql;import com.cattsoft.pub.exception.AppException;import com.cattsoft.pub.exception.SysException;import com.cattsoft.pub.util.CollectionFactory;import com.cattsoft.pub.util.JdbcUtil;import com.cattsoft.pub.util.StringUtil;import com.cattsoft.pub.vo.GenericVO;import com.cattsoft.sp.component.dao.ISoAttachSDAO;import com.cattsoft.sp.vo.SoAttachSVO;/** * 方法SoAttachSDAOImpl * <p> * Company: 大唐软件 * </p> *  * @author ：白小亮。 * @version 1.1 2007-9-23 */public class SoAttachSDAOImpl implements ISoAttachSDAO {	// private static Logger log = Logger.getLogger(SoAttachSDAOImpl.class);	// private static final String UNABLE_STS = "P";	/**	 * 增加。	 * 	 * @return String	 */	public void add(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoAttachSVO soAttach = (SoAttachSVO) vo;		if (StringUtil.isBlank(soAttach.getSoAttachId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO SO_ATTACH(ATTACHMENT,FILE_NAME,LOCAL_NET_ID,REMARKS,SO_ATTACH_ID,SO_NBR,STS,STS_DATE,WO_NBR,FOR_SCENE)");		sql				.append(" VALUES (:attachment,:fileName,:localNetId,:remarks,:soAttachId,:soNbr,:sts,:stsDate,:woNbr,:forScene)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			if (soAttach.getAttachment() == null) {				sql.setNullBlob("attachment");			} else {				sql.setBlob("attachment", soAttach.getAttachment());			}			if (StringUtil.isBlank(soAttach.getFileName())) {				sql.setNullString("fileName");			} else {				sql.setString("fileName", soAttach.getFileName());			}			if (StringUtil.isBlank(soAttach.getLocalNetId())) {				sql.setNullLong("localNetId");			} else {				sql.setLong("localNetId", soAttach.getLocalNetId());			}			if (StringUtil.isBlank(soAttach.getRemarks())) {				sql.setNullString("remarks");			} else {				sql.setString("remarks", soAttach.getRemarks());			}			if (StringUtil.isBlank(soAttach.getSoAttachId())) {				sql.setNullLong("soAttachId");			} else {				sql.setLong("soAttachId", soAttach.getSoAttachId());			}			if (StringUtil.isBlank(soAttach.getSoNbr())) {				sql.setNullString("soNbr");			} else {				sql.setString("soNbr", soAttach.getSoNbr());			}			if (StringUtil.isBlank(soAttach.getSts())) {				sql.setNullString("sts");			} else {				sql.setString("sts", soAttach.getSts());			}			if (soAttach.getStsDate() == null) {				sql.setNullDate("stsDate");			} else {				sql.setTimestamp("stsDate", soAttach.getStsDate());			}			if (StringUtil.isBlank(soAttach.getWoNbr())) {				sql.setNullLong("woNbr");			} else {				sql.setLong("woNbr", soAttach.getWoNbr());			}						if (StringUtil.isBlank(soAttach.getForScene())) {				sql.setString("forScene","C");			} else {				sql.setString("forScene", soAttach.getForScene());			}			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 主键查询的SQL。	 * 	 * @return String ： 主键查询的SQL。	 */	public GenericVO findByPK(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoAttachSVO soAttach = (SoAttachSVO) vo;		if (StringUtil.isBlank(soAttach.getSoAttachId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Sql sql = new Sql(				"SELECT ATTACHMENT,FILE_NAME,LOCAL_NET_ID,REMARKS,SO_ATTACH_ID,SO_NBR,STS,STS_DATE,WO_NBR FROM SO_ATTACH WHERE 1=1  ");		sql.append(" and SO_ATTACH_ID=:soAttachId");		sql.setLong("soAttachId", soAttach.getSoAttachId());		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		soAttach = null;		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				soAttach = new SoAttachSVO();				soAttach.setAttachment(rs.getBlob("ATTACHMENT"));				soAttach.setFileName(rs.getString("FILE_NAME"));				soAttach.setLocalNetId(rs.getString("LOCAL_NET_ID"));				soAttach.setRemarks(rs.getString("REMARKS"));				soAttach.setSoAttachId(rs.getString("SO_ATTACH_ID"));				soAttach.setSoNbr(rs.getString("SO_NBR"));				soAttach.setSts(rs.getString("STS"));				soAttach.setStsDate(rs.getTimestamp("STS_DATE"));				soAttach.setWoNbr(rs.getString("WO_NBR"));			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		return soAttach;	}	/**	 * 批量查询的SQL。	 * 	 * @return String ： 批量查询的SQL。	 */	public List findByVO(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoAttachSVO soAttach = (SoAttachSVO) vo;		List res = (List)CollectionFactory.createCollection(CollectionFactory.COLLECTION_LIST);		Connection conn = null;		PreparedStatement ps = null;		ResultSet rs = null;		Sql sql = new Sql(				"SELECT FILE_NAME,LOCAL_NET_ID,REMARKS,SO_ATTACH_ID,SO_NBR,STS,STS_DATE,WO_NBR FROM SO_ATTACH WHERE 1=1 ");		try {			if (soAttach.getFlagAttachment() == 1) {				if (soAttach.getAttachment() == null) {					sql.append(" and ATTACHMENT is null ");				} else {					sql.append(" and ATTACHMENT=:attachment");					sql.setBlob("attachment", soAttach.getAttachment());				}			}			if (soAttach.getFlagFileName() == 1) {				if (StringUtil.isBlank(soAttach.getFileName())) {					sql.append(" and FILE_NAME is null ");				} else {					sql.append(" and FILE_NAME=:fileName");					sql.setString("fileName", soAttach.getFileName());				}			}			if (soAttach.getFlagLocalNetId() == 1) {				if (StringUtil.isBlank(soAttach.getLocalNetId())) {					sql.append(" and LOCAL_NET_ID is null ");				} else {					sql.append(" and LOCAL_NET_ID=:localNetId");					sql.setLong("localNetId", soAttach.getLocalNetId());				}			}			if (soAttach.getFlagRemarks() == 1) {				if (StringUtil.isBlank(soAttach.getRemarks())) {					sql.append(" and REMARKS is null ");				} else {					sql.append(" and REMARKS=:remarks");					sql.setString("remarks", soAttach.getRemarks());				}			}			if (soAttach.getFlagSoAttachId() == 1) {				if (StringUtil.isBlank(soAttach.getSoAttachId())) {					sql.append(" and SO_ATTACH_ID is null ");				} else {					sql.append(" and SO_ATTACH_ID=:soAttachId");					sql.setLong("soAttachId", soAttach.getSoAttachId());				}			}			if (soAttach.getFlagSoNbr() == 1) {				if (StringUtil.isBlank(soAttach.getSoNbr())) {					sql.append(" and SO_NBR is null ");				} else {					sql.append(" and SO_NBR=:soNbr");					sql.setString("soNbr", soAttach.getSoNbr());				}			}			if (soAttach.getFlagSts() == 1) {				if (StringUtil.isBlank(soAttach.getSts())) {					sql.append(" and STS is null ");				} else {					sql.append(" and STS=:sts");					sql.setString("sts", soAttach.getSts());				}			}			if (soAttach.getFlagStsDate() == 1) {				if (soAttach.getStsDate() == null) {					sql.append(" and STS_DATE is null ");				} else {					sql.append(" and STS_DATE=:stsDate");					sql.setTimestamp("stsDate", soAttach.getStsDate());				}			}			if (soAttach.getFlagWoNbr() == 1) {				if (StringUtil.isBlank(soAttach.getWoNbr())) {					sql.append(" and WO_NBR is null ");				} else {					sql.append(" and WO_NBR=:woNbr");					sql.setLong("woNbr", soAttach.getWoNbr());				}			}			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			rs = ps.executeQuery();			while (rs.next()) {				soAttach = new SoAttachSVO();				//soAttach.setAttachment(rs.getBlob("ATTACHMENT"));				soAttach.setFileName(rs.getString("FILE_NAME"));				soAttach.setLocalNetId(rs.getString("LOCAL_NET_ID"));				soAttach.setRemarks(rs.getString("REMARKS"));				soAttach.setSoAttachId(rs.getString("SO_ATTACH_ID"));				soAttach.setSoNbr(rs.getString("SO_NBR"));				soAttach.setSts(rs.getString("STS"));				soAttach.setStsDate(rs.getTimestamp("STS_DATE"));				soAttach.setWoNbr(rs.getString("WO_NBR"));				res.add(soAttach);			}		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(rs, ps);		}		if (0 == res.size())			res = null;		return res;	}	/**	 * 更新的SQL。	 * 	 * @return String ： 更新的SQL。	 */	public void update(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoAttachSVO soAttach = (SoAttachSVO) vo;		if (StringUtil.isBlank(soAttach.getSoAttachId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("UPDATE SO_ATTACH SET ");		try {			if (soAttach.getFlagAttachment() == 1) {				sql.append("ATTACHMENT=:attachment,");				sql.setBlob("attachment", soAttach.getAttachment());			}			if (soAttach.getFlagFileName() == 1) {				sql.append("FILE_NAME=:fileName,");				sql.setString("fileName", soAttach.getFileName());			}			if (soAttach.getFlagLocalNetId() == 1) {				sql.append("LOCAL_NET_ID=:localNetId,");				sql.setLong("localNetId", soAttach.getLocalNetId());			}			if (soAttach.getFlagRemarks() == 1) {				sql.append("REMARKS=:remarks,");				sql.setString("remarks", soAttach.getRemarks());			}			if (soAttach.getFlagSoNbr() == 1) {				sql.append("SO_NBR=:soNbr,");				sql.setString("soNbr", soAttach.getSoNbr());			}			if (soAttach.getFlagSts() == 1) {				sql.append("STS=:sts,");				sql.setString("sts", soAttach.getSts());			}			if (soAttach.getFlagStsDate() == 1) {				sql.append("STS_DATE=:stsDate,");				sql.setTimestamp("stsDate", soAttach.getStsDate());			}			if (soAttach.getFlagWoNbr() == 1) {				sql.append("WO_NBR=:woNbr,");				sql.setLong("woNbr", soAttach.getWoNbr());			}			sql.removeSuffix(1);			sql.append(" WHERE 1=1 ");			sql.append(" and SO_ATTACH_ID=:soAttachId");			sql.setLong("soAttachId", soAttach.getSoAttachId());			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			ps = sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 批量增加记录。	 * 	 * @return String ： 批量增加的SQL。	 */	public void addBat(List list) throws AppException, SysException {		if (list == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql(				"INSERT INTO SO_ATTACH(ATTACHMENT,FILE_NAME,LOCAL_NET_ID,REMARKS,SO_ATTACH_ID,SO_NBR,STS,STS_DATE,WO_NBR)");		sql				.append(" VALUES (:attachment,:fileName,:localNetId,:remarks,:soAttachId,:soNbr,:sts,:stsDate,:woNbr)");		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			for (int i = 0; i < list.size(); i++) {				SoAttachSVO soAttach = (SoAttachSVO) list.get(i);				if (soAttach == null) {					throw new AppException("100001", "缺少DAO操作对象！");				}				if (StringUtil.isBlank(soAttach.getSoAttachId())) {					throw new AppException("100002", "缺少对象的主键！");				}				if (soAttach.getAttachment() == null) {					sql.setNullBlob("attachment");				} else {					sql.setBlob("attachment", soAttach.getAttachment());				}				if (StringUtil.isBlank(soAttach.getFileName())) {					sql.setNullString("fileName");				} else {					sql.setString("fileName", soAttach.getFileName());				}				if (StringUtil.isBlank(soAttach.getLocalNetId())) {					sql.setNullLong("localNetId");				} else {					sql.setLong("localNetId", soAttach.getLocalNetId());				}				if (StringUtil.isBlank(soAttach.getRemarks())) {					sql.setNullString("remarks");				} else {					sql.setString("remarks", soAttach.getRemarks());				}				if (StringUtil.isBlank(soAttach.getSoAttachId())) {					sql.setNullLong("soAttachId");				} else {					sql.setLong("soAttachId", soAttach.getSoAttachId());				}				if (StringUtil.isBlank(soAttach.getSoNbr())) {					sql.setNullString("soNbr");				} else {					sql.setString("soNbr", soAttach.getSoNbr());				}				if (StringUtil.isBlank(soAttach.getSts())) {					sql.setNullString("sts");				} else {					sql.setString("sts", soAttach.getSts());				}				if (soAttach.getStsDate() == null) {					sql.setNullDate("stsDate");				} else {					sql.setTimestamp("stsDate", soAttach.getStsDate());				}				if (StringUtil.isBlank(soAttach.getWoNbr())) {					sql.setNullLong("woNbr");				} else {					sql.setLong("woNbr", soAttach.getWoNbr());				}				sql.fillParams(ps);				sql.log(this.getClass());				sql.clearParameters();				ps.addBatch();			}			ps.executeBatch();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 根据传入参数删除一条或者一批记录。	 * 	 * @return String ： 删除的SQL。	 */	public void delete(GenericVO vo) throws AppException, SysException {		if (vo == null) {			throw new AppException("100001", "缺少DAO操作对象！");		}		SoAttachSVO soAttach = (SoAttachSVO) vo;		if (StringUtil.isBlank(soAttach.getSoAttachId())) {			throw new AppException("100002", "缺少对象的主键！");		}		Connection conn = null;		PreparedStatement ps = null;		Sql sql = new Sql("DELETE FROM SO_ATTACH WHERE 1=1  ");		sql.append(" and SO_ATTACH_ID=:soAttachId");		sql.setLong("soAttachId", soAttach.getSoAttachId());		try {			conn = ConnectionFactory.getConnection();			ps = conn.prepareStatement(sql.getSql());			sql.fillParams(ps);			sql.log(this.getClass());			ps.executeUpdate();		} catch (SQLException se) {			throw new SysException("100003", "JDBC操作异常！", se);		} finally {			JdbcUtil.close(ps);		}	}	/**	 * 注销一条或者一批	 * 	 * @return String ： 注销一条或者一批的SQL。	 */	public void unable(GenericVO vo) throws AppException, SysException {		// SoAttachSVO soAttach=(SoAttachSVO) vo;	}}